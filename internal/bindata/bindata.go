// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/default-config.json
// data/migrations/1_create_msmt_results.sql

package bindata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDataDefaultconfigjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x6f\xdb\x3c\x0c\x86\xef\xf9\x15\x82\xce\x75\x53\xe0\xbb\xe5" +
	"\xf8\xdd\x76\xd8\x3a\x60\xbb\x15\x85\x20\x5b\xb4\x4d\x4c\x26\x35\x91\x4e\x16\x0c\xfd\xef\x83\xdc\x24\x56\xda\xae" +
	"\xeb\xd1\xef\x4b\x53\xe2\x43\x52\xbf\x37\xc6\x58\x67\x77\xc6\x7e\x1f\x51\x0c\x8a\x39\xf2\x9c\xcd\xfd\xfd\x97\x4f" +
	"\xe6\x6b\xe6\x16\x4c\xc7\xd4\xe3\x60\x7a\x8c\x70\x6b\xbe\x01\x98\x51\x35\xc9\x6e\xbb\x65\x26\xbc\x45\xde\x8e\x10" +
	"\xd3\x36\x95\xd8\xa6\x8b\x68\x7a\xce\xa6\x48\xf6\x66\x49\xbd\x87\x2c\xc8\x64\x77\xe6\xee\x59\x40\xea\x39\x4f\x10" +
	"\x5c\xc7\x24\x40\x6a\x77\xa6\xf7\x51\xe0\xe4\x8a\x6b\x41\xbd\xdd\x19\xcd\xf3\xb3\xe6\x67\x65\x37\xa7\xe0\x15\x6a" +
	"\x59\x46\x9f\x91\x06\xbb\x33\xa5\x06\x63\x2c\x52\x17\xe7\x00\x0e\x53\x9d\xb2\x32\xbc\x50\x95\xa0\x32\x86\x24\xd7" +
	"\xc6\x9c\x22\xfb\xe0\x32\xc8\x1c\xf5\xec\x6d\x8c\x79\x5a\x4e\x26\x56\xec\xb1\xf3\x8a\x4c\xb2\x9e\x0f\xe4\xdb\x08" +
	"\xe1\x3a\xd3\x12\x7b\x74\x4c\x4e\x41\xd4\x75\x3c\xa5\x08\xfa\x0c\xe4\xcd\x30\x82\x83\x9c\xef\x7f\x39\xb1\x20\x98" +
	"\xbc\x42\x58\xb2\x5c\x55\xbd\x9e\x5a\x97\x7c\x52\x97\xf0\x92\xee\x61\x91\x8d\xb1\x07\x68\x9b\x8e\x89\xa0\x53\xdc" +
	"\xa3\x1e\xed\xcd\xd9\xe9\x7d\x07\x2d\xf3\x8f\x66\x02\x11\xa0\x01\xf2\xea\x1d\x46\xaf\xe2\x53\x5a\x15\x85\x08\x43" +
	"\xf6\xd3\xaa\x04\x2f\xe3\xfa\x45\x41\xd7\x8f\x32\x31\x0d\xd2\xde\x47\x0c\x4d\x86\x9f\x33\x88\x36\x11\x09\x5e\x84" +
	"\x8c\xe0\x03\xe4\xa6\x47\x88\xa1\x99\x3c\x61\x9a\xe3\x42\xd9\x2e\x61\x8f\xa7\xe2\x26\x26\x1d\xe3\xd1\xf9\x18\xf9" +
	"\xe0\xa9\x2b\x63\x61\xff\xbb\xbb\xfb\xfc\xbf\xbd\x10\x5b\x68\x0b\x68\x81\x55\xf5\xe8\x00\xad\xa0\xc2\xaa\x54\xac" +
	"\x3a\xaf\x30\x70\xc6\xc5\x7d\x78\x5c\xec\xa7\xcb\xa4\x88\x7a\x52\x57\xd8\xf8\xa1\x6e\xc0\x3b\xb0\xdf\x87\xfa\x16" +
	"\xd6\x1a\xec\x49\xba\xbe\x47\x82\x5c\xb6\xe7\x54\xf4\x47\x6e\x50\x1a\x71\x4e\x55\x77\xc7\x09\xe4\x3d\xe4\x82\xae" +
	"\x4c\x97\x7d\xc3\x73\x89\xb3\xbe\x0e\x28\x8d\xfe\xeb\xdf\x95\x79\xfd\xfb\x55\x19\x13\x86\x10\xa1\xe5\x5f\x1f\x2c" +
	"\xe2\xdf\x03\xf4\xc1\x11\xba\xf0\x5c\x57\x2b\xec\x0b\xcd\xf0\xfa\x1d\xe9\x78\x26\xcd\xc7\x17\x2f\x83\x80\x0b\x3c" +
	"\x79\x24\xd7\x67\xa6\xd3\x2e\xd6\xab\x27\x40\xc1\x75\xb9\x70\xc8\x50\x10\xd4\xef\xc7\xe6\x69\xf3\x27\x00\x00\xff" +
	"\xff\x42\x02\xc0\xed\x72\x05\x00\x00")

func bindataDataDefaultconfigjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataDefaultconfigjson,
		"data/default-config.json",
	)
}



func bindataDataDefaultconfigjson() (*asset, error) {
	bytes, err := bindataDataDefaultconfigjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/default-config.json",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDataMigrations1createmsmtresultssql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6d\x6f\xdb\xc6\xb2\xfe\xee\x5f\x31\x30\x8a\xd6\xc6\x95\xe4\x24" +
	"\x37\x0d\xee\x75\x5b\x14\xae\xad\xe4\xa8\x8d\xe5\x40\x96\x4f\x13\x1c\x1c\x88\x2b\x72\x28\x6d\xbd\xdc\x65\xf6\x45" +
	"\x8a\xce\xaf\x3f\x98\xd9\x25\x45\xca\x4e\xe2\x00\xcd\x07\x47\x22\x77\x67\xe7\xf5\x99\x67\x56\xc3\x21\xfc\x4f\x25" +
	"\x57\x56\x78\x84\x2b\xb3\xd5\x47\xdd\x07\xb7\x5e\x78\xac\x50\xfb\xdf\x70\x25\xf5\xd1\xd1\xd5\xec\xe6\x1d\xcc\x2f" +
	"\x7e\x7b\x3b\x86\xcc\xa2\x0b\xca\xbb\xec\xa7\xde\xd3\x0a\x85\x0b\x96\xf7\x1c\xbe\x0a\x56\x1d\x3e\xd2\xe8\xb7\xc6" +
	"\xde\xd3\xe3\xc7\xcf\x1d\xeb\xa2\xff\xe6\xae\xfe\xa2\x82\x97\xb3\xf1\xc5\x7c\xdc\x3b\x11\x4e\x8e\x00\x32\x59\x64" +
	"\x30\x99\xce\xc7\x6f\xc6\x33\x78\x37\x9b\x5c\x5f\xcc\x3e\xc0\x1f\xe3\x0f\x70\x71\x37\xbf\x99\x4c\x2f\x67\xe3\xeb" +
	"\xf1\x74\x3e\xa0\x95\xc1\xaa\x0c\xfe\x79\x31\xbb\xfc\xc7\xc5\xec\xe4\xc5\x8f\x3f\x9e\xc2\xf4\x66\x0e\xd3\xbb\xb7" +
	"\x6f\x07\x30\x1c\xc2\xfb\xf7\xef\x41\x3a\xf0\x6b\xe9\x40\x19\xbd\x02\xd4\x26\xac\xd6\xbf\xd2\xd6\x5c\x78\x5c\x19" +
	"\xbb\x5b\xe4\xa6\xc0\xbd\x90\x43\x11\xf3\x35\x42\x2e\xbd\xfc\x0f\x6a\x25\x96\xd0\xec\x02\xda\x05\xa5\xb1\xe0\xd7" +
	"\x78\x04\x4f\xfb\x37\x1c\x82\x93\x1e\x47\xf0\x27\x42\x70\x48\x5b\xc1\x79\x2b\xf5\x0a\xa6\x37\xd3\x31\x78\x03\x05" +
	"\x6a\xe3\xbf\x45\xa0\x36\x70\xaf\xcd\x56\xf7\x35\x1b\x1d\xb1\x89\x26\x68\xff\xc0\xc2\x17\x7b\x0b\x1b\x03\xfd\xd6" +
	"\x80\x42\xef\xd1\x42\xda\x13\xed\xdb\xae\x65\xbe\x66\xf7\x3d\x4d\xa3\xe1\x10\xee\x66\x6f\x61\x89\xe4\x6c\x07\xde" +
	"\x1c\x9d\xc6\x64\xf9\x13\x21\xb7\x48\x49\x20\xc0\x61\x2d\x38\x1f\xbc\x58\xaa\xe8\xc3\x26\xb5\xf8\xcb\x0b\xb0\x28" +
	"\x9c\xd1\xee\x9c\x76\x3e\x1f\xc1\x6b\x63\xc1\x99\x0a\xc1\x94\xec\xb2\x8d\xc4\xad\x83\xed\x1a\x2d\x82\x46\x2c\xf8" +
	"\xa1\x37\x5e\x28\xd0\xa1\x5a\xa2\xa5\x85\x29\xb7\x8b\x56\xf6\x80\xa4\x49\xff\x83\x83\x95\x21\x8f\x7b\x03\x4b\x84" +
	"\x2a\xe4\x6b\xa8\x8c\x45\xc0\xb2\x94\xb9\x44\xed\xe9\xcd\x5f\xc1\x79\x50\xc6\xdc\x87\x9a\xa5\xb3\x57\x48\xac\x35" +
	"\x5b\x07\x52\x47\x9f\x0c\x87\xd1\x86\x11\x7d\x7a\x31\x82\x93\xca\x38\x0f\xb2\xaa\x8d\xf5\x42\xfb\x53\x32\x7b\x2b" +
	"\xa2\x44\xb1\x31\xb2\x80\x22\xd4\x4a\xe6\xc2\x93\x02\x02\x96\x41\xe7\x6b\x92\x2a\x75\x69\x6c\x25\xbc\x34\x24\x59" +
	"\x78\x56\xb5\xaf\x68\x6e\xaa\x8a\xde\x1a\x70\xb8\x41\x4b\xb6\x36\x4e\x23\x05\x83\x43\x4b\x5b\x8c\x66\x65\xc6\x9f" +
	"\x44\x55\x2b\x3c\x4f\xbe\xaf\xc4\x0e\xb6\xd2\xad\x59\x91\xa2\xa0\xff\xb8\x26\x62\x04\x68\xbf\x32\x79\x3c\xbe\xb4" +
	"\xa6\x6a\x1c\x5d\x5b\xb3\xc4\xf8\x84\xbe\xbe\x79\x77\x4b\xf2\x8c\x65\x19\x2e\xd4\x64\x27\x87\x4c\x28\x65\xb6\xac" +
	"\x6b\xa3\x8a\x37\x70\x9c\x1b\x6b\x31\xf7\xc7\x20\xa0\x92\x2e\x57\xc2\x39\x59\x4a\x2c\xa0\x83\x3b\x49\x60\x21\x1d" +
	"\xf9\x24\x48\xb7\x26\x31\x4b\xf4\x5b\x44\x0d\x5b\x59\x4a\x10\xba\x80\xca\x2c\x25\xf9\xb9\x0f\x19\x2d\x22\x7d\x2b" +
	"\x6c\xa4\x8d\x0b\x2d\x2a\xec\xe3\x07\xd7\xfc\x6d\xac\x49\x7a\x0b\x16\x6b\x8b\x0e\xb5\x6f\xcc\xeb\xee\x4d\x05\xb2" +
	"\xdc\x41\x81\xa5\x08\xca\x53\x08\x6a\x53\x07\x25\x3c\x16\xb0\x14\x0e\x8b\xaf\x55\x0e\x39\x40\xb3\xe4\x8b\xdb\xe9" +
	"\xe8\x09\xab\x13\x78\x74\x0a\xe9\x1e\x77\xe4\x70\x8b\x25\x5a\xd4\x79\x8c\x68\xca\xd4\x27\x08\xdc\xa7\x82\x1b\xc0" +
	"\x12\x73\x41\xe2\xb7\xfd\xac\x39\x46\x6d\x65\xbe\x3e\x7e\xaa\xb8\xad\xf4\xa9\xae\x0a\xe1\x45\xac\x18\x84\x32\xf8" +
	"\x60\x71\xd4\x0d\x81\xdf\xd5\x9d\x10\x3c\x7f\x15\x23\x70\xa3\xb9\xda\x29\xfe\x83\x14\x7c\x42\x34\xc8\x64\xbd\x5f" +
	"\xfc\xf2\x59\x17\xab\x63\xe0\x8c\x45\x47\xae\x89\x11\x6c\x83\x17\x73\xdb\x94\x20\x34\xc8\x7a\xf3\x92\x72\x4e\xd6" +
	"\x9b\x57\x94\xc9\x16\x9d\x7b\x8a\xdf\xe7\x5c\x26\x7a\x85\x54\xe3\x35\x45\x3a\x0a\x6b\x85\x80\x92\xf7\x78\xfe\x04" +
	"\x49\xcf\x9e\x3d\x7b\x76\xfe\xf5\x3f\x83\x27\x88\x8a\x09\x28\x1d\xfc\xef\xff\x43\xbe\x16\x96\x2d\xc9\x84\xd3\x5c" +
	"\x0a\x27\x2f\x3b\x1e\xfa\x3b\x3a\x02\xe3\x79\xbf\x08\x1b\x6a\xc1\x35\xf8\x2d\x55\x98\x9c\x2a\x1d\xe4\x42\x13\xc4" +
	"\x99\x18\xf4\xe3\x2d\x2e\xa9\x4d\xba\xe3\x01\x1c\xcb\x8a\xfe\xd6\x68\x19\x20\x75\x8e\xf4\xb5\x92\x45\xa1\x70\x69" +
	"\x3e\x1d\xc7\xb8\x65\x1e\x9d\x5f\xac\xac\x09\xf5\x41\x49\x3f\x7f\xd5\x77\x40\xbf\x80\x0a\x59\x72\xc5\x78\x70\x5e" +
	"\x58\xbf\xf0\xb2\x42\x86\x1b\x1b\x34\x7d\xee\x55\x43\x0b\xe4\xca\x19\x58\x8b\x0d\x36\xe2\x38\xc1\xbd\x69\x50\x8d" +
	"\x13\xdd\x6c\xd0\xae\x51\x14\x64\x0f\x37\xbe\x08\xf8\x16\x19\x32\xe9\x08\xe3\xd7\x68\xa1\x14\xb9\x37\xd6\x45\xd0" +
	"\x4f\xf2\x56\x06\xa4\x66\x84\x46\x20\xc3\x46\x7b\x5f\x09\x06\x18\xea\x01\x62\x77\x0e\xd9\xed\xdd\xf5\x49\x52\xf5" +
	"\x14\x5e\xcf\x6e\xae\xa1\xc7\xe8\x60\x2b\x95\x02\xa1\xb6\x62\xe7\xc8\xbf\x3f\xff\xd2\x48\xca\xd2\xae\xb8\x69\x1f" +
	"\x41\xee\x5f\xf4\xc2\xc1\xcf\xa7\xd1\xb5\x7b\xcf\x64\x70\x75\x31\x1f\xcf\x27\xd7\xe3\x03\x97\x36\xd2\x32\x98\x8d" +
	"\x2f\xde\x76\x5e\x36\xc7\xdd\x39\xe4\x9e\x23\x75\x41\xcd\x0f\x41\x96\xfb\x4e\xb1\x16\x0e\x1c\x81\x3d\xe3\x46\xd4" +
	"\x25\x65\x92\x5b\x50\xab\xc7\x22\x83\xf9\x64\xfa\x81\xf2\xf9\xf9\xe9\x23\xe2\x39\x87\xa8\x1c\xa1\x54\x62\x45\x52" +
	"\x1f\x3d\x2d\x8a\xa6\x85\x05\x67\x1a\xf7\xcb\x3c\x58\x4a\x00\xb5\xa3\x98\x6b\xa9\x57\xa3\xf6\x6c\x5a\xf5\x99\x93" +
	"\x79\x09\xc5\x7d\x11\x9c\x58\xe1\x22\xd4\xfb\x9c\xff\xfc\xaa\xc2\x6c\xf5\xe7\xd6\x0d\x87\x30\x21\x6e\x42\x2d\x57" +
	"\x2c\x49\x1d\xe6\x40\xb1\x3f\x53\xcf\xf7\x6c\x43\x25\x3e\xc9\x2a\x54\xa0\x50\xaf\x3c\x03\xf3\x8b\x57\xcf\x40\x24" +
	"\x8a\xcb\x54\xb7\xcd\xcb\x83\xb5\xa6\x84\x52\x2a\x84\x5a\xf8\x35\xf1\x04\xd8\x4a\x5d\x98\x6d\x82\xbe\xee\x2c\xb0" +
	"\x28\xa4\xed\x80\xc3\xab\x0e\xcc\x3e\x52\xff\xfd\x94\xfb\x9b\x40\xe0\xbc\x79\x55\x8a\x1c\x97\xc6\xdc\x2f\x2a\x74" +
	"\x0e\xf5\x0a\x6d\xf3\xc6\xa3\xc2\x95\x15\xd5\x51\x8b\x84\xc2\x3b\x51\xd7\xcd\xf7\xb5\xf7\xf5\x82\x6a\x10\xed\xa2" +
	"\x94\xa8\x8a\x45\x25\xb4\xe4\xd6\x2c\x8d\xee\xad\x92\x7a\x23\x94\x2c\x16\x16\x3f\x06\x42\x12\x25\x75\xa7\xba\xdd" +
	"\xba\xf9\xac\x0b\xdf\xc1\x9b\x3e\xd2\xbc\x7a\xf9\x20\x41\xfe\x8e\xd2\x79\x1d\x27\x0c\xa8\x83\xad\x8d\x63\x7c\x4c" +
	"\xfc\xa2\xe1\x23\x91\xa4\x75\x19\x64\x6a\xb6\xa9\xac\x1b\x49\xcc\x9a\x07\xb0\x33\x01\xdc\xda\x04\x55\x40\x2d\xf3" +
	"\xfb\xd8\x96\xa5\x75\xbe\x8b\x1d\x8d\x88\xdf\x6f\x26\x53\x70\xc6\x32\x99\xd9\x35\x92\xf6\x76\xb5\xd0\xf4\xc1\x04" +
	"\xaa\xaa\x1f\x3c\x23\x23\xef\x5d\x05\x61\x85\xf6\x88\x0c\x6e\x40\xa4\x75\x07\x27\xb2\x1e\x80\x70\x7a\xd0\x74\x95" +
	"\x41\x8f\x4f\x9d\x36\xf2\x62\x26\x83\x23\x8e\x25\x35\x08\x38\xee\x6a\xe7\x90\x48\xa5\x73\x26\x97\xcc\xb3\x08\x95" +
	"\xe1\x38\xda\xdb\xb4\x84\x46\x6c\x37\x13\x1f\xba\x77\x6a\x7c\x9c\x40\x56\x46\x09\xbd\x3a\x27\xa0\x6f\xf0\x83\x2d" +
	"\x71\x34\xb3\x76\x9a\x53\x16\x51\x81\x10\x3c\x13\xb9\x97\x1b\xcc\x06\xe0\xcc\x51\x97\xfb\x48\x07\xf8\x31\xc8\x8d" +
	"\x50\x69\x9a\x60\xbc\x59\x22\x47\xcc\x06\x86\x9e\x52\x28\xb7\x77\x5f\xc6\xc7\x64\x30\x1f\xbf\x4f\x55\xf1\x04\x00" +
	"\x4a\x9d\x3a\x02\x45\xab\xb0\x80\x02\x23\xee\x15\x20\xdd\x22\xd4\xca\x88\x02\x0b\x86\xc6\x01\x48\xed\x7c\x6a\x4b" +
	"\x3c\xe2\x04\x27\xf5\x6a\xef\xf4\xb4\x7c\x51\x0a\xa9\xb0\x18\xc4\x30\x08\xdf\x90\x41\x6d\x52\x7c\x5b\xa9\x8c\x49" +
	"\x9d\xc8\x14\xa1\x2d\x1c\x0e\x8a\x43\xef\x7b\xa0\xda\xec\x7c\x22\xa4\x1f\xca\x8f\x8a\x31\xd9\x0d\x9a\xa3\xd0\xf6" +
	"\x91\x94\xd4\x14\x2a\xea\xea\x96\x97\x35\xf2\x2c\x0e\x69\x83\xf4\x7b\x4d\xa2\xa8\x2f\x01\x3c\xad\x08\x16\x17\x95" +
	"\x5b\x1d\x0c\x09\x47\x07\xf6\x3c\x41\x58\x67\xe1\x97\x64\x52\x1f\x70\x0f\x5b\x18\x47\x81\x93\xab\x16\xd6\xcb\x3c" +
	"\x28\x61\x7b\x8e\xa1\x2e\xba\xa4\x2e\x9a\x2c\x15\xba\xd8\xe7\x24\x5a\x2c\x4d\x62\x26\x77\x13\x46\x5a\x2f\xee\x31" +
	"\x65\x2b\x71\x0d\x91\xc7\x09\xd7\x1b\x40\xc9\xcc\x64\x2d\x0b\x04\xe9\xdb\xe9\x6f\xef\x49\xee\xa2\x84\x26\x3c\x09" +
	"\xc6\xbe\xc4\xc5\xad\x50\x38\x4f\xa3\x5c\x3b\x55\x8a\xa5\x54\xd2\xa7\xe1\xa4\x17\x81\x74\x39\x53\x18\xca\x2d\xa6" +
	"\x54\x0d\xbf\x4a\x59\xdc\x19\x66\x4c\x82\x33\x16\xd0\x31\xfa\xd7\x36\x0a\x16\x6d\xd0\xdf\x90\x52\x0e\xed\x06\xed" +
	"\xd0\x91\x8d\x91\x93\x2d\x64\x01\x16\x7d\xb0\x9a\xa1\x2e\x0d\xfd\x4a\x21\xf1\xb3\x11\xfc\xb6\xeb\x97\xca\x7e\xd3" +
	"\xf7\x20\x75\x1d\x7c\x04\x56\xf2\xec\xc7\x40\xbe\x60\xeb\x6b\x49\xca\x97\xe8\xd3\x25\x4a\x57\xf9\xd6\x0d\xe3\x4f" +
	"\xed\xc7\x37\xe3\x39\x37\x24\x77\x7e\x76\x26\x6a\x39\x32\x46\xcb\x91\x34\xf4\xf9\x6c\xf3\xfc\xac\xdb\x69\x7f\xe5" +
	"\x53\x7f\xf9\x6e\x32\x7d\x77\x37\xff\xbe\x55\xe7\x97\xef\x66\xe3\x77\x37\xb3\xf9\x62\x72\xb5\x97\xef\xad\xc8\x7d" +
	"\x07\xe8\xa5\xc7\x6a\x3f\xd5\x27\x02\xff\xaf\x7f\x67\xa0\xa4\xf3\x4d\x51\xe9\xa8\x77\xdb\x88\x7b\x04\x81\xaf\xdd" +
	"\xbc\x81\x55\xa2\x25\xbf\xdf\xde\x4c\xe3\xa5\x41\xdf\x48\x1a\x42\x3b\xf4\x15\x5d\x1c\x2c\x36\x42\x05\x74\x70\x92" +
	"\xb5\x7a\x67\x03\xc8\xd8\xa2\xec\x14\x84\xe5\x8a\x2e\x83\xda\x7b\x4f\xb4\xa4\xa6\x23\x9c\x8b\x82\x12\x5f\x28\x8b" +
	"\xa2\xd8\xc5\x02\xa8\xad\xc9\x89\x2b\xb4\x61\xac\x65\x8d\xd4\xd1\x07\x1d\x3c\x90\x55\xad\xa2\x90\x5c\xa1\xd0\xa1" +
	"\xe6\xd9\x30\x89\x69\xd1\xad\xeb\xf0\x04\x1c\x7b\x8d\x1f\x5e\x1b\x74\x69\x0c\xcf\x52\x5b\x72\xa3\x36\x0d\xed\x67" +
	"\xfa\xd5\x14\xea\x57\x66\xbb\xe1\x30\x5d\x98\x15\xa3\x04\x36\xc1\xaa\xaf\x34\xb3\x26\xc3\x09\xa6\x77\xe8\x89\x0f" +
	"\xa3\xa0\x81\xbb\xb9\xcf\x69\x13\x7a\x00\xcb\xc0\xa8\x4e\xbe\xae\x95\x60\xe6\x9b\x2e\x87\x7a\xad\x4c\xf8\x78\xf3" +
	"\x56\x1b\xb9\x67\x05\x1a\x85\xed\x8c\xf2\x71\xf2\x46\x3c\x6f\x73\x77\x25\xfd\x3a\x2c\x47\xb9\xa9\xce\x28\x85\xcf" +
	"\x9a\x08\x9c\x2d\x95\x59\x9e\x55\xc2\x79\xb4\x67\x85\xc9\x1d\xbf\x1e\x86\x20\x8b\x51\x55\xc0\xf7\x5d\x52\xf6\x45" +
	"\x39\xd2\xb9\x80\xee\xec\xe5\xff\x3d\xe4\xae\xc9\x45\xc4\xc7\x0e\x3d\x93\xc0\xd4\x35\x76\xe4\x22\x12\x2a\x01\xcd" +
	"\xc4\xc9\xf3\xd6\x20\x26\x96\xe0\xbb\x5a\xf2\x27\x8d\xf5\xaa\x65\x3f\x4b\x65\xf2\x7b\x6a\x8e\xd4\xc5\x09\x01\x35" +
	"\x4c\xae\x79\x63\x33\x68\xa4\xaf\x8e\xa6\x34\x97\x90\xa0\xfe\xb2\x20\x59\xf2\x25\x59\x1a\x6b\x61\x2b\x1c\x14\xe8" +
	"\x31\xe7\xf8\x77\x38\x16\x65\x57\x46\xac\x2c\x03\x01\xd9\xe5\xcd\xdd\x74\x7e\x72\x9a\xb5\xa5\xc7\x85\x75\xc0\xff" +
	"\x22\x54\xa7\x62\x15\xed\x4d\xe6\x81\x16\x10\xed\x37\xb6\x7d\x30\xb9\x26\xb5\x5d\x8b\xb1\x42\x9b\x4a\xa8\x5d\x17" +
	"\x65\x1f\x19\xc1\x34\x98\x5a\x7c\x0c\x09\x12\x9c\xb7\x21\xa7\x3c\x19\xa4\xeb\xda\x2d\x31\x2a\x6a\x45\xdd\xfb\x5c" +
	"\x66\xd3\xf7\xb8\x6b\xa9\xea\x36\xdd\xeb\xa6\xeb\xf5\x3e\xc3\x40\x2f\xa4\x72\xe9\x12\x98\xc0\x8a\x45\x75\xda\x92" +
	"\x83\x13\xfc\x34\xea\xf6\xac\x58\xd0\x67\x34\x7f\xd1\x07\x70\x35\x49\x37\x25\x4c\xaf\xe6\x83\xe4\x2b\x26\x51\x65" +
	"\x63\x3f\x95\x03\x67\x06\xb9\xa5\xa5\x5b\xe8\xf3\xd1\x69\x67\x02\x20\x9d\x33\xb6\xb4\xeb\x09\x84\xdc\x1a\xd7\x5c" +
	"\xae\xf6\xfa\x18\xf3\x69\x9f\xae\x57\xe2\x8d\x1b\x78\xb3\x42\xea\xb8\x2d\xc0\x90\x21\x9f\xab\xf4\x87\x23\xef\x46" +
	"\x58\xc9\x07\x31\x67\x90\xda\xa3\xd5\x42\x29\xee\xb9\x04\xfc\x91\xe1\xd3\xd0\xd7\x34\x52\xa3\x87\x85\x74\xf7\x8f" +
	"\x20\xaa\x1b\xfd\xe5\x8c\x1e\xc1\xc4\x33\xdd\xab\x88\x23\x38\xd4\x8e\x75\xdf\x5a\x2a\x07\x62\xb2\x71\x8c\x44\x0b" +
	"\xc8\xf7\x42\xfb\xc1\x60\x6d\x0c\x7b\xee\xfa\x0f\x0e\x4c\x6d\x71\x93\x2e\x4e\x1b\x22\x41\x42\x1a\xa8\x89\x72\x8c" +
	"\x26\xc6\x70\x9f\x2e\xb2\x2a\xb1\x17\x46\x3c\xa0\x12\x7a\xd7\xd3\x90\xcf\x2d\xf9\x2e\xb8\x8b\xc7\xf4\x64\x41\x46" +
	"\x7e\x66\x6e\x4d\xf1\x79\x7d\x33\x1b\x4f\xde\x4c\x79\x14\x3d\xe9\xb8\xfa\x14\x66\xe3\xd7\xe3\xd9\x78\x7a\x39\xbe" +
	"\xdd\xdf\x68\x9d\xd0\x18\x7b\x9a\x80\xfa\x66\x0a\x57\xe3\xb7\xe3\xf9\x18\x2e\x2f\x6e\x2f\x2f\xae\xc6\xf4\xe4\xee" +
	"\x1d\xcd\x75\xcd\x13\x6e\x02\x93\x92\xd2\xb7\x40\x85\x3e\xd2\x18\xce\xcb\x2e\xc9\x79\xea\x8f\x3b\xc9\x0f\x42\xa9" +
	"\xc3\x22\x70\xe9\x37\x81\x78\x4a\x41\xf3\xff\x16\x95\x1a\x3d\x62\x63\xea\x1a\x7d\x03\xf9\xa7\xb6\x68\xdd\xe0\x70" +
	"\xcf\x49\x77\x72\xea\x6f\xeb\x5c\xb7\x47\xcf\x9c\xfe\xf4\xf9\x1f\x02\xff\x1b\x00\x00\xff\xff\x66\x75\x1e\xc1\xab" +
	"\x1c\x00\x00")

func bindataDataMigrations1createmsmtresultssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataMigrations1createmsmtresultssql,
		"data/migrations/1_create_msmt_results.sql",
	)
}



func bindataDataMigrations1createmsmtresultssql() (*asset, error) {
	bytes, err := bindataDataMigrations1createmsmtresultssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/migrations/1_create_msmt_results.sql",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/default-config.json":                  bindataDataDefaultconfigjson,
	"data/migrations/1_create_msmt_results.sql": bindataDataMigrations1createmsmtresultssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"default-config.json": {Func: bindataDataDefaultconfigjson, Children: map[string]*bintree{}},
		"migrations": {Func: nil, Children: map[string]*bintree{
			"1_create_msmt_results.sql": {Func: bindataDataMigrations1createmsmtresultssql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/default-config.json
// data/migrations/1_create_msmt_results.sql

package bindata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDataDefaultconfigjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x6f\xdb\x3c\x0c\x86\xef\xf9\x15\x82\xce\x75\x53\xe0\xbb\xe5" +
	"\xf8\xdd\x76\xd8\x3a\x60\xbb\x15\x85\x20\x5b\xb4\x4d\x4c\x26\x35\x91\x4e\x16\x0c\xfd\xef\x83\xdc\x24\x56\xda\xae" +
	"\xeb\xd1\xef\x4b\x53\xe2\x43\x52\xbf\x37\xc6\x58\x67\x77\xc6\x7e\x1f\x51\x0c\x8a\x39\xf2\x9c\xcd\xfd\xfd\x97\x4f" +
	"\xe6\x6b\xe6\x16\x4c\xc7\xd4\xe3\x60\x7a\x8c\x70\x6b\xbe\x01\x98\x51\x35\xc9\x6e\xbb\x65\x26\xbc\x45\xde\x8e\x10" +
	"\xd3\x36\x95\xd8\xa6\x8b\x68\x7a\xce\xa6\x48\xf6\x66\x49\xbd\x87\x2c\xc8\x64\x77\xe6\xee\x59\x40\xea\x39\x4f\x10" +
	"\x5c\xc7\x24\x40\x6a\x77\xa6\xf7\x51\xe0\xe4\x8a\x6b\x41\xbd\xdd\x19\xcd\xf3\xb3\xe6\x67\x65\x37\xa7\xe0\x15\x6a" +
	"\x59\x46\x9f\x91\x06\xbb\x33\xa5\x06\x63\x2c\x52\x17\xe7\x00\x0e\x53\x9d\xb2\x32\xbc\x50\x95\xa0\x32\x86\x24\xd7" +
	"\xc6\x9c\x22\xfb\xe0\x32\xc8\x1c\xf5\xec\x6d\x8c\x79\x5a\x4e\x26\x56\xec\xb1\xf3\x8a\x4c\xb2\x9e\x0f\xe4\xdb\x08" +
	"\xe1\x3a\xd3\x12\x7b\x74\x4c\x4e\x41\xd4\x75\x3c\xa5\x08\xfa\x0c\xe4\xcd\x30\x82\x83\x9c\xef\x7f\x39\xb1\x20\x98" +
	"\xbc\x42\x58\xb2\x5c\x55\xbd\x9e\x5a\x97\x7c\x52\x97\xf0\x92\xee\x61\x91\x8d\xb1\x07\x68\x9b\x8e\x89\xa0\x53\xdc" +
	"\xa3\x1e\xed\xcd\xd9\xe9\x7d\x07\x2d\xf3\x8f\x66\x02\x11\xa0\x01\xf2\xea\x1d\x46\xaf\xe2\x53\x5a\x15\x85\x08\x43" +
	"\xf6\xd3\xaa\x04\x2f\xe3\xfa\x45\x41\xd7\x8f\x32\x31\x0d\xd2\xde\x47\x0c\x4d\x86\x9f\x33\x88\x36\x11\x09\x5e\x84" +
	"\x8c\xe0\x03\xe4\xa6\x47\x88\xa1\x99\x3c\x61\x9a\xe3\x42\xd9\x2e\x61\x8f\xa7\xe2\x26\x26\x1d\xe3\xd1\xf9\x18\xf9" +
	"\xe0\xa9\x2b\x63\x61\xff\xbb\xbb\xfb\xfc\xbf\xbd\x10\x5b\x68\x0b\x68\x81\x55\xf5\xe8\x00\xad\xa0\xc2\xaa\x54\xac" +
	"\x3a\xaf\x30\x70\xc6\xc5\x7d\x78\x5c\xec\xa7\xcb\xa4\x88\x7a\x52\x57\xd8\xf8\xa1\x6e\xc0\x3b\xb0\xdf\x87\xfa\x16" +
	"\xd6\x1a\xec\x49\xba\xbe\x47\x82\x5c\xb6\xe7\x54\xf4\x47\x6e\x50\x1a\x71\x4e\x55\x77\xc7\x09\xe4\x3d\xe4\x82\xae" +
	"\x4c\x97\x7d\xc3\x73\x89\xb3\xbe\x0e\x28\x8d\xfe\xeb\xdf\x95\x79\xfd\xfb\x55\x19\x13\x86\x10\xa1\xe5\x5f\x1f\x2c" +
	"\xe2\xdf\x03\xf4\xc1\x11\xba\xf0\x5c\x57\x2b\xec\x0b\xcd\xf0\xfa\x1d\xe9\x78\x26\xcd\xc7\x17\x2f\x83\x80\x0b\x3c" +
	"\x79\x24\xd7\x67\xa6\xd3\x2e\xd6\xab\x27\x40\xc1\x75\xb9\x70\xc8\x50\x10\xd4\xef\xc7\xe6\x69\xf3\x27\x00\x00\xff" +
	"\xff\x42\x02\xc0\xed\x72\x05\x00\x00")

func bindataDataDefaultconfigjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataDefaultconfigjson,
		"data/default-config.json",
	)
}



func bindataDataDefaultconfigjson() (*asset, error) {
	bytes, err := bindataDataDefaultconfigjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/default-config.json",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDataMigrations1createmsmtresultssql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xff\x6f\xdb\x38\xb2\xff\x3d\x7f\xc5\x20\x58\xec\x4b\xf0\x6c\x27" +
	"\xed\xeb\x16\xef\x72\xbb\x58\x64\x13\xb5\xe7\xdd\xc6\x29\x1c\xe7\xb6\xc5\xe1\x60\xd1\xd2\xc8\xe6\x86\x22\x55\x92" +
	"\xb2\xea\xfb\xeb\x0f\x33\xa4\x64\xc9\x4d\xb3\x29\xb0\xfd\x21\xb5\x25\x72\x38\x5f\x3f\xf3\x19\x7a\x3c\x86\xff\x2d" +
	"\xe5\xda\x0a\x8f\x70\x6d\x1a\x7d\xd4\x7f\x70\xe7\x85\xc7\x12\xb5\xff\x05\xd7\x52\x1f\x1d\x5d\xcf\x6f\xdf\xc3\xe2" +
	"\xf2\x97\x77\x09\xa4\x16\x5d\xad\xbc\x4b\xff\x3e\x78\x5a\xa2\x70\xb5\xe5\x3d\x87\xaf\x6a\xab\x0e\x1f\x69\xf4\x8d" +
	"\xb1\x0f\xf4\xf8\xf1\x73\x13\x9d\x0f\xdf\xdc\x57\x4f\x2a\x78\x35\x4f\x2e\x17\xc9\xe0\x44\x38\x39\x02\x48\x65\x9e" +
	"\xc2\x74\xb6\x48\xde\x26\x73\x78\x3f\x9f\xde\x5c\xce\x3f\xc2\x6f\xc9\x47\xb8\xbc\x5f\xdc\x4e\x67\x57\xf3\xe4\x26" +
	"\x99\x2d\x46\xb4\xb2\xb6\x2a\x85\x7f\x5e\xce\xaf\xfe\x71\x39\x3f\x79\xf9\xc3\x0f\xa7\x30\xbb\x5d\xc0\xec\xfe\xdd" +
	"\xbb\x11\x8c\xc7\xf0\xe1\xc3\x07\x90\x0e\xfc\x46\x3a\x50\x46\xaf\x01\xb5\xa9\xd7\x9b\x9f\x69\x6b\x26\x3c\xae\x8d" +
	"\xdd\x2d\x33\x93\xe3\x5e\xc8\xa1\x88\xc5\x06\x21\x93\x5e\xfe\x07\xb5\x12\x2b\x68\x77\x01\xed\x82\xc2\x58\xf0\x1b" +
	"\x3c\x82\xe7\xfd\x1b\x8f\xc1\x49\x8f\x13\xf8\x1d\xa1\x76\x48\x5b\xc1\x79\x2b\xf5\x1a\x66\xb7\xb3\x04\xbc\x81\x1c" +
	"\xb5\xf1\xdf\x22\x50\x1b\x78\xd0\xa6\xd1\x43\xcd\x26\x47\x6c\xa2\xa9\xb5\xff\xc2\xc2\x97\x7b\x0b\x5b\x03\x7d\x63" +
	"\x40\xa1\xf7\x68\x21\xee\x09\xf6\x35\x1b\x99\x6d\xd8\x7d\xcf\xd3\x68\x3c\x86\xfb\xf9\x3b\x58\x21\x39\xdb\x81\x37" +
	"\x47\xa7\x21\x59\x7e\x47\xc8\x2c\x52\x12\x08\x70\x58\x09\xce\x07\x2f\x56\x2a\xf8\xb0\x4d\x2d\xfe\xf2\x12\x2c\x0a" +
	"\x67\xb4\xbb\xa0\x9d\x2f\x26\xf0\xc6\x58\x70\xa6\x44\x30\x05\xbb\x6c\x2b\xb1\x71\xd0\x6c\xd0\x22\x68\xc4\x9c\x1f" +
	"\x7a\xe3\x85\x02\x5d\x97\x2b\xb4\xb4\x30\xe6\x76\xde\xc9\x1e\x91\x34\xe9\xff\xc7\xc1\xda\x90\xc7\xbd\x81\x15\x42" +
	"\x59\x67\x1b\x28\x8d\x45\xc0\xa2\x90\x99\x44\xed\xe9\xcd\x1f\xb5\xf3\xa0\x8c\x79\xa8\x2b\x96\xce\x5e\x21\xb1\xd6" +
	"\x34\x0e\xa4\x0e\x3e\x19\x8f\x83\x0d\x13\xfa\xf4\x72\x02\x27\xa5\x71\x1e\x64\x59\x19\xeb\x85\xf6\xa7\x64\x76\x23" +
	"\x82\x44\xb1\x35\x32\x87\xbc\xae\x94\xcc\x84\x27\x05\x04\xac\x6a\x9d\x6d\x48\xaa\xd4\x85\xb1\xa5\xf0\xd2\x90\x64" +
	"\xe1\x59\xd5\xa1\xa2\x99\x29\x4b\x7a\x6b\xc0\xe1\x16\x2d\xd9\xda\x3a\x8d\x14\xac\x1d\x5a\xda\x62\x34\x2b\x93\x7c" +
	"\x16\x65\xa5\xf0\x22\xfa\xbe\x14\x3b\x68\xa4\xdb\xb0\x22\x79\x4e\xff\x71\x4d\x84\x08\xd0\x7e\x65\xb2\x70\x7c\x61" +
	"\x4d\xd9\x3a\xba\xb2\x66\x85\xe1\x09\x7d\x7d\xfb\xfe\x8e\xe4\x19\xcb\x32\x5c\x5d\x91\x9d\x1c\x32\xa1\x94\x69\x58" +
	"\xd7\x56\x15\x6f\xe0\x38\x33\xd6\x62\xe6\x8f\x41\x40\x29\x5d\xa6\x84\x73\xb2\x90\x98\x43\x0f\x77\xa2\xc0\x5c\x3a" +
	"\xf2\x49\x2d\xdd\x86\xc4\xac\xd0\x37\x88\x1a\x1a\x59\x48\x10\x3a\x87\xd2\xac\x24\xf9\x79\x08\x19\x1d\x22\x7d\x2b" +
	"\x6c\xc4\x8d\x4b\x2d\x4a\x7c\x0a\x3f\xee\x42\x71\xd2\x32\xb0\x58\x59\x74\xa8\x7d\x6b\x67\x5f\x48\xac\x94\xd5\x0e" +
	"\x72\x2c\x44\xad\x3c\xc5\xa2\x32\x55\xad\x84\xc7\x1c\x56\xc2\x61\xfe\x67\x25\x44\x9e\xd0\x2c\xf9\xf2\x6e\x36\x79" +
	"\xc6\xea\x88\x22\xbd\x8a\x7a\xc0\x1d\x79\xde\x62\x81\x16\x75\x16\x42\x1b\x53\xf6\x19\x02\xf7\x39\xe1\x46\xb0\xc2" +
	"\x4c\x90\xf8\x66\x98\x3e\xc7\xa8\xad\xcc\x36\xc7\xcf\x15\xd7\x48\x1f\x0b\x2c\x17\x5e\x84\xd2\x41\x28\x6a\x5f\x5b" +
	"\x9c\xf4\x63\xe1\x77\x55\x2f\x16\x2f\x5e\x1f\x84\xe2\x56\x73\xfd\x53\x46\x8c\x62\x3a\x10\xc6\x41\x2a\xab\xfd\xae" +
	"\x57\xe7\xfd\x5d\x21\x82\xc6\xa2\x23\x1f\x85\x50\x76\x51\x0c\xd9\x6e\x0a\x10\x1a\x64\xb5\x7d\x45\x59\x28\xab\xed" +
	"\x6b\xca\x6d\x8b\xce\x3d\x27\x00\x0b\x2e\x1c\xbd\x46\xaa\xfa\x8a\x42\x1e\x84\x75\x42\x40\xc9\x07\xbc\x78\x86\xa4" +
	"\xf3\xf3\xf3\xf3\x8b\x3f\xff\x33\x7a\x86\xa8\x90\x89\xd2\xc1\xff\xfd\x0d\xb2\x8d\xb0\x6c\x49\x2a\x9c\xe6\xe2\x38" +
	"\x79\xd5\xf3\xd0\x5f\xd1\x23\x18\xe1\x87\x65\xd9\x92\x0d\xae\xca\x6f\xa9\xcb\xe8\x54\xe9\x20\x13\x9a\x40\xcf\x84" +
	"\xa0\x1f\x37\xb8\xa2\xc6\xe9\x8e\x47\x70\x2c\x4b\xfa\x5b\xa1\x65\xc8\xd4\x19\xd2\xd7\x52\xe6\xb9\xc2\x95\xf9\x7c" +
	"\x1c\xe2\x96\x7a\x74\x7e\xb9\xb6\xa6\xae\x0e\x8a\x7c\x90\x58\xed\x99\x5d\x25\xe5\xb2\xe0\xd2\xf1\xe0\xbc\xb0\x7e" +
	"\xe9\x65\x89\x0c\x40\xb6\xd6\xf4\x79\x50\x16\x1d\xb4\x2b\x67\x60\x23\xb6\xd8\x8a\xe3\x4c\xf7\xa6\xc5\x39\xce\x78" +
	"\xb3\x45\xbb\x41\x91\x93\x3d\xdc\x0a\x43\x0b\xb0\xc8\x20\x4a\x47\x18\xbf\x41\x0b\x85\xc8\xbc\xb1\x2e\xb4\x81\x28" +
	"\x6f\x6d\x40\x6a\xc6\x6c\x04\x32\x6c\xb2\xf7\x95\x60\xa4\xa1\xae\x20\x76\x17\x90\xde\xdd\xdf\x9c\x44\x55\x4f\xe1" +
	"\xcd\xfc\xf6\x06\x06\x1c\x0f\x1a\xa9\x14\x08\xd5\x88\x9d\x23\xff\xfe\xf8\x53\x2b\x29\x8d\xbb\xc2\xa6\x7d\x04\xb9" +
	"\xa3\xd1\x0b\x07\x3f\x9e\x06\xd7\xee\x3d\x93\xc2\xf5\xe5\x22\x59\x4c\x6f\x92\x03\x97\xb6\xd2\x52\x98\x27\x97\xef" +
	"\x7a\x2f\xdb\xe3\xee\x1d\x72\x17\x92\x3a\xa7\x76\x88\x20\x8b\x7d\xef\xd8\x08\x07\x8e\xe0\x9f\x01\x24\xe8\x12\x33" +
	"\xc9\x2d\xa9\xf9\x63\x9e\xc2\x62\x3a\xfb\x48\xf9\xfc\xe2\xf4\x11\xf1\x9c\x43\x54\x8e\x50\x28\xb1\x26\xa9\x8f\x9e" +
	"\x16\x44\xd3\xc2\x9c\x33\x8d\x3b\x68\x56\x5b\x4a\x00\xb5\xa3\x98\x6b\xa9\xd7\x93\xee\x6c\x5a\xf5\x95\x93\x79\x09" +
	"\xc5\x7d\x59\x3b\xb1\xc6\x65\x5d\xed\x73\xfe\xeb\xab\x72\xd3\xe8\xaf\xad\x1b\x8f\x61\x4a\x6c\x85\x9a\xb0\x58\x91" +
	"\x3a\xcc\x8a\x42\xc7\x26\x16\xe0\xd9\x86\x52\x7c\x96\x65\x5d\x82\x42\xbd\xf6\x8c\xd0\x2f\x5f\x9f\x83\x88\xa4\x97" +
	"\xc9\x6f\x97\x97\x07\x6b\x4d\x01\x85\x54\x08\x95\xf0\x1b\x62\x0e\xd0\x48\x9d\x9b\x26\x42\x5f\x7f\x3a\x58\xe6\xd2" +
	"\xf6\xc0\xe1\xf5\xf9\x17\x4e\xef\x60\xbc\x5f\xec\x43\x83\xde\xdc\xce\x93\xe9\xdb\x19\x95\xfe\x49\x7f\xf9\x29\xcc" +
	"\x93\x37\xc9\x3c\x99\x5d\x25\x77\x83\x9e\x4e\xc0\x71\xfa\x08\xbe\x0c\x53\xfa\x2f\x02\x99\x8b\xf6\x55\x21\x32\x5c" +
	"\x19\xf3\xb0\x2c\xd1\x39\xd4\x6b\xb4\xed\x1b\x8f\x0a\xd7\x56\x94\x47\x1d\xd2\x0a\xef\x44\x55\xb5\xdf\x37\xde\x57" +
	"\x4b\xaa\x71\xb4\xcb\x42\xa2\xca\x97\xa5\xd0\x92\x39\x80\x34\x7a\xb0\x4a\xea\xad\x50\x32\x5f\x5a\xfc\x54\x13\x52" +
	"\x29\xa9\x7b\xe8\xe1\x36\xed\x67\x9d\xfb\x1e\x9e\x0d\x91\xec\xf5\xab\x2f\x12\xf0\xaf\x28\xcd\x99\xf1\x81\x94\xaf" +
	"\x8d\x12\x7a\x7d\x41\x48\xd7\x16\x10\x81\x1c\x21\xa3\xc7\x1e\x3a\xa7\xa1\x2c\x08\xc2\x52\x91\x79\xb9\xc5\x74\x04" +
	"\xce\x1c\xf5\x59\x80\x74\x80\x9f\x6a\xb9\x15\x2a\x12\x6c\x2e\xb8\x15\x32\x97\xb2\x35\xd7\x5e\x21\x94\xc3\x0e\xda" +
	"\x52\x3e\x26\x85\x45\xf2\x21\x86\xed\x19\x15\x18\x5b\x55\xa8\x94\x4e\x61\x01\x39\x86\xc2\xcf\x41\xba\x65\x5d\x29" +
	"\x23\x72\xcc\x19\x1b\x46\x20\xb5\xf3\x11\x97\x99\xf5\xd7\x4e\xea\x75\x2b\xad\x5b\xbe\x2c\x84\x54\x98\x8f\x42\x45" +
	"\x09\xdf\xd2\x22\x6d\x7c\x38\xa4\x93\xca\x45\xb9\xcf\x50\xc8\xeb\x2e\xb2\xd4\x2b\xa8\x70\xfd\x00\x55\xda\x9d\xcf" +
	"\xc4\xb4\x43\xf9\x41\x31\xa6\x7d\xb5\xe6\x28\x74\x40\xea\x36\xa6\x56\x39\x87\x8a\xda\x9a\xe5\x65\xad\x3c\x8b\x63" +
	"\xda\x20\xfd\x5e\x93\x20\xea\x29\x84\xa3\x15\xb5\xc5\x65\xe9\xd6\x43\xde\xdc\xc2\xc0\xa1\xc3\x9e\x12\xd6\x5b\xf8" +
	"\x94\x4c\x02\x42\xf7\x25\x86\x73\x14\x38\xb9\x2a\x61\xbd\xcc\x6a\x25\xec\xc0\x31\xd4\x46\x56\xd4\x46\xa2\xa5\x42" +
	"\xe7\xfb\x9c\x44\x8b\x85\x89\xad\xf9\x7e\xca\x50\xe0\xc5\x03\xc6\x6c\xa5\x66\x2b\xb2\x30\xf4\x79\x03\x28\xb9\x35" +
	"\x6f\x64\x8e\x20\x7d\x37\x10\xed\x3d\xc9\x6d\x84\x3a\x13\x0f\x47\x01\x98\xb7\x68\x77\xa0\x50\x38\x4f\xd3\x4d\x37" +
	"\x68\x89\x95\x54\xd2\x47\x9a\x3e\x88\x40\xbc\xaf\xc8\x0d\xe5\x16\x73\x8a\x96\x60\xc4\x2c\xee\xd1\x7a\x13\xfb\x17" +
	"\x0b\xe8\x19\xfd\x73\x17\x05\x8b\xb6\xd6\xdf\x90\x52\x0e\xed\x16\xed\xd8\x91\x8d\x81\x94\x2c\x65\x0e\x16\x7d\x6d" +
	"\x35\x4d\x30\xbb\x38\x07\x2b\x85\x44\x50\x26\xf0\xcb\x6e\x58\x2a\xfb\x4d\xdf\x83\xd4\x55\xed\x47\xb0\x33\x35\x7b" +
	"\xf6\x53\x4d\xbe\x60\xeb\x2b\x49\xca\x17\xe8\xe3\xbd\x42\x5f\xf9\xce\x0d\xc9\xe7\xee\xe3\xdb\x64\xc1\x88\xe9\x2e" +
	"\xce\xce\x44\x25\x27\xc6\x68\x39\x91\x86\x3e\x9f\x6d\x5f\x9c\xf5\x5b\xc1\xcf\x7c\xea\x4f\xdf\x4d\x67\xef\xef\x17" +
	"\xdf\x77\xea\xfc\xf4\xdd\x3c\x79\x7f\x3b\x5f\x2c\xa7\xd7\x7b\xf9\xde\x8a\x2c\x84\xa9\x90\x96\xd8\xbb\xc7\x72\x3f" +
	"\xe8\x46\x06\xfb\xaf\x7f\xa7\xa0\xa4\xf3\x6d\x51\xe9\xa0\x77\xd7\x29\x06\x1d\x92\x6f\xa2\xbc\x81\x75\xec\xcb\xbf" +
	"\xde\xdd\xce\xc2\x1c\x3d\x34\x92\xc6\xb1\x1e\x7f\x43\x17\x98\xf5\x56\xa8\x1a\x1d\x9c\xa4\x9d\xde\xe9\x08\x52\xb6" +
	"\x28\x3d\x05\x61\xb9\xa2\x8b\x5a\xed\xbd\x27\xba\xae\xde\x13\xce\x45\x41\x89\x2f\x94\x45\x91\xef\x42\x01\x54\xd6" +
	"\x64\xd4\xcc\xba\x30\x56\xb2\x42\x6a\x39\xa3\x1e\x1e\xc8\xb2\x52\x41\x48\xa6\x50\xe8\xba\xe2\xe1\x28\x8a\xe9\xd0" +
	"\xad\xef\xf0\x08\x1c\x7b\x8d\x87\xd5\x7b\xd8\x67\x79\x98\x68\xc8\x8d\xda\xb4\xbc\x97\xf9\x47\x5b\xa8\x7f\x32\xdc" +
	"\x8c\xc7\xf1\x0e\x29\x9f\x44\xb0\xa9\xad\xfa\x0a\xdf\x38\xcc\x70\x82\xe9\x1d\x7a\x22\x84\x28\x68\xf4\x6c\xaf\x38" +
	"\xba\x84\x1e\xc1\xaa\x66\x54\x27\x5f\x57\x4a\x30\xf5\x8b\xf7\x25\x83\x56\x26\x7c\xb8\x8c\xaa\x8c\xd4\xbe\x9d\x67" +
	"\x35\x0a\xdb\x1b\x6a\xc3\xe8\x89\x78\xd1\xe5\xee\x5a\xfa\x4d\xbd\x9a\x64\xa6\x3c\xa3\x14\x3e\x6b\x23\x70\xb6\x52" +
	"\x66\x75\x56\x0a\xe7\xd1\x9e\xe5\x26\x73\xfc\x7a\x5c\xd7\x32\x9f\x94\x39\x7c\xdf\x67\x0d\x4f\xca\x91\xce\xd5\xe8" +
	"\xce\x5e\xfd\xff\x97\xe4\x2d\xba\x88\x08\xc3\xa1\x67\x22\x98\xba\xd6\x8e\x4c\x38\x76\x8d\x80\x76\xe4\xe2\x81\x63" +
	"\x14\x12\x4b\xf0\xf5\x25\xf9\x93\xe6\x5a\xb5\x6b\x65\xad\x94\xc9\x1e\xa8\x39\x52\x17\x27\x04\xd4\x30\xbd\xe1\x8d" +
	"\x2d\xd3\x8e\x5f\x1d\x8d\x29\x2e\x22\x41\xf5\xb4\x20\x59\xf0\xbd\x51\x9c\xeb\xa0\x11\x0e\x72\xf4\x98\x71\xfc\xe3" +
	"\xfa\x8f\x11\x60\xd2\x5f\x6f\xa7\xb3\x14\x04\xa4\x57\xb7\xf7\xb3\xc5\xc9\x69\xda\x95\x1e\x17\x56\x6b\x5e\x9c\x6b" +
	"\x02\x54\xc7\x62\x15\xdd\xe5\xde\x81\x16\x10\xec\x37\xb6\x7b\x30\xbd\x21\xb5\x5d\x87\xb1\x42\x9b\x52\xa8\x5d\x1f" +
	"\x65\x1f\x99\x41\x34\x98\x4a\x7c\xaa\x23\x24\x38\x6f\xeb\x8c\xf2\x64\x14\x6f\x30\x1b\x62\x54\xd4\x8a\xfa\x57\x9c" +
	"\x4c\xf7\x1e\x70\xe7\x3a\xae\x19\xaf\x3a\xe3\x8d\xf3\x90\x61\xa0\x17\x52\xb9\x78\x2f\x4a\x60\xc5\xa2\x7a\x6d\xc9" +
	"\xc1\x09\x7e\x9e\xf4\x7b\x56\x28\xe8\x33\x1a\x40\xe8\x03\xb8\x8a\xa4\x9b\x02\x66\xd7\x8b\x51\xf4\x15\x93\xa8\xa2" +
	"\xb5\x9f\xca\x81\x33\x83\xdc\xd2\xd1\x2d\xf4\xd9\xe4\xb4\x47\x51\x49\xe7\x34\x58\xfa\x58\x35\x22\x64\xd6\xb8\xf6" +
	"\xe2\x71\xd0\xd0\x28\x84\xc1\xf6\xc6\xc4\x4b\x28\xf0\x66\x8d\xd4\x7a\x3b\xa4\x21\x8b\xbe\x56\xf2\x5f\x0e\x7f\x5b" +
	"\x61\x25\x1f\xc4\xe4\x41\x6a\x8f\x56\x0b\xa5\xb8\xf9\x52\x07\x78\x08\x60\x28\xc2\xdc\xc4\x53\xba\x1e\xe7\xd2\x3d" +
	"\x3c\x02\xad\x6e\xf2\x87\x33\x7a\x02\x53\xcf\xbc\xaf\x24\xb2\xe0\x50\x3b\xd6\xbd\xb1\x54\x17\x44\x69\xc3\x40\x85" +
	"\x16\x90\x6f\x48\x56\x5d\x6a\x6f\x8c\x61\x17\xde\xfc\xc6\x11\xaa\x2c\x6e\xe3\x5d\x62\xcb\x28\x48\x48\x8b\x39\x41" +
	"\x8e\xd1\x44\x1d\x1e\xe2\x95\x4e\x29\xf6\xc2\x88\x10\x94\x42\xef\x06\x1a\xf2\xb9\x05\xdf\x93\xf6\x81\x99\x9e\x2c" +
	"\xc9\xc8\xa7\x27\xb8\xde\x78\xc6\x6d\xa8\x75\xf5\x70\x3c\x6b\x6f\x06\xe2\x70\x16\x90\xf9\x76\x06\xd7\xc9\xbb\x64" +
	"\x91\xc0\xd5\xe5\xdd\xd5\xe5\x75\x42\x4f\xee\xdf\xd3\x04\xd2\x3e\xe1\x6e\x30\x2d\x28\x8f\x73\x54\xe8\x03\x9f\xe1" +
	"\x04\xed\xb3\x9d\xe7\xfe\xf0\x11\xfd\x20\x94\x3a\xac\x06\x17\xef\xcb\xc3\x29\x39\x4d\xc2\x0d\x2a\x35\x79\xc4\xc6" +
	"\xd8\x3e\x86\x06\xf2\xcf\x50\xfb\xd1\xf3\xab\x3f\x74\xfd\x37\x00\x00\xff\xff\x11\xda\x64\x3c\x8b\x1b\x00\x00")

func bindataDataMigrations1createmsmtresultssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataMigrations1createmsmtresultssql,
		"data/migrations/1_create_msmt_results.sql",
	)
}



func bindataDataMigrations1createmsmtresultssql() (*asset, error) {
	bytes, err := bindataDataMigrations1createmsmtresultssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/migrations/1_create_msmt_results.sql",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/default-config.json":                  bindataDataDefaultconfigjson,
	"data/migrations/1_create_msmt_results.sql": bindataDataMigrations1createmsmtresultssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"default-config.json": {Func: bindataDataDefaultconfigjson, Children: map[string]*bintree{}},
		"migrations": {Func: nil, Children: map[string]*bintree{
			"1_create_msmt_results.sql": {Func: bindataDataMigrations1createmsmtresultssql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

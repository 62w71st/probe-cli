// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/default-config.json
// data/migrations/1_create_msmt_results.sql

package bindata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDataDefaultconfigjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x6f\xdb\x3e\x0c\xc5\xef\xf9\x14\x82\xce\x75\x53\xe0\x7f\xcb" +
	"\xf1\x7f\xdb\x61\xeb\x80\xed\x56\x14\x82\x6c\xd1\x36\x31\x99\xd4\x44\x3a\x59\x30\xf4\xbb\x0f\x72\x93\x58\xd9\xb2" +
	"\xae\x47\xbf\x47\xd3\x7a\x3f\x52\xfe\xb9\x31\xc6\x3a\xbb\x33\xf6\xeb\x88\x62\x50\xcc\x91\xe7\x6c\x1e\x1f\x3f\x7d" +
	"\x30\x9f\x33\xb7\x60\x3a\xa6\x1e\x07\xd3\x63\x84\x7b\xf3\x05\xc0\x8c\xaa\x49\x76\xdb\x2d\x33\xe1\x3d\xf2\x76\x84" +
	"\x98\xb6\xa9\xd4\x36\x5d\x44\xd3\x73\x36\x45\xb2\x77\x4b\xeb\x3d\x64\x41\x26\xbb\x33\x0f\xaf\x02\x52\xcf\x79\x82" +
	"\xe0\x3a\x26\x01\x52\xbb\x33\xbd\x8f\x02\x27\x57\x5c\x0b\xea\xed\xce\x68\x9e\x5f\x35\x3f\x2b\xbb\x39\x05\xaf\x50" +
	"\xcb\x32\xfa\x8c\x34\xd8\x9d\x29\x19\x8c\xb1\x48\x5d\x9c\x03\x38\x4c\x75\xcb\xca\xf0\x42\x55\x83\xca\xe8\x78\x26" +
	"\xcd\xc7\xdb\xe6\x90\xe4\xda\x98\x53\x64\x1f\x5c\x06\x99\xa3\x9e\xbd\x8d\x31\x2f\xcb\xb1\x88\x15\x7b\xec\xbc\x22" +
	"\x93\xac\x87\x03\xf2\x6d\x84\x70\xdd\x69\xa9\x3d\x3a\x26\xa7\x20\xea\x3a\x9e\x52\x04\x7d\xa5\x75\xb3\x8c\xe0\x20" +
	"\xe7\x70\x97\x2f\x16\x3e\x93\x57\x08\x4b\x97\x2b\x24\xeb\x57\x6b\x1e\x27\x75\x29\x2f\xed\x9e\x16\xd9\x18\x7b\x80" +
	"\xb6\xe9\x98\x08\x3a\xc5\x3d\xea\xd1\xde\x9d\x9d\xde\x77\xd0\x32\x7f\x6b\x26\x10\x01\x1a\x20\xaf\xde\x61\xf4\x2a" +
	"\x3e\xa5\x55\x51\x88\x30\x64\x3f\xad\x4a\xf0\x32\xae\x4f\x14\x74\x7d\x28\xeb\xd4\x20\xed\x7d\xc4\xd0\x64\xf8\x3e" +
	"\x83\x68\x13\x91\xe0\xb7\x92\x11\x7c\x80\xdc\xf4\x08\x31\x34\x93\x27\x4c\x73\x5c\x28\xdb\xa5\xec\xf9\x14\x6e\x62" +
	"\xd2\x31\x1e\x9d\x8f\x91\x0f\x9e\xba\xb2\x33\xf6\xbf\x87\x87\x8f\xff\xdb\x0b\xb1\x85\xb6\x80\x16\x58\xd5\x8c\x0e" +
	"\xd0\x0a\x2a\xac\x4a\xc5\xaa\xf3\x0a\x03\x67\x5c\xdc\xa7\xe7\xc5\x7e\xb9\x6c\x8a\xa8\x27\x75\x85\x8d\x1f\xea\x01" +
	"\xbc\x01\xfb\x6d\xa8\xb7\xb0\xd6\x60\x4f\xd2\xf5\x39\x12\xe4\x72\xb5\x4e\xa1\xdf\x73\x82\x32\x88\x73\xab\x7a\x3a" +
	"\x4e\x20\xef\x21\x17\x74\x65\xbb\xec\x0d\xcf\x25\xce\xfa\x67\x41\x19\xf4\x5f\xdf\xae\xcc\xeb\xd7\xaf\x62\x4c\x18" +
	"\x42\x84\x96\x7f\xbc\x33\xc4\xbf\x17\xe8\x9d\x2b\x74\xe1\xb9\x5e\xad\xb0\x2f\x34\xc3\xba\x23\xb3\x80\x0b\x3c\x79" +
	"\x24\xd7\x67\xa6\xd3\x75\xab\x6f\x97\x00\x05\xd7\xe5\x12\x35\x43\x49\x59\xff\x22\x36\x2f\x9b\x5f\x01\x00\x00\xff" +
	"\xff\x96\xe8\x5a\xf8\x72\x05\x00\x00")

func bindataDataDefaultconfigjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataDefaultconfigjson,
		"data/default-config.json",
	)
}



func bindataDataDefaultconfigjson() (*asset, error) {
	bytes, err := bindataDataDefaultconfigjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/default-config.json",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDataMigrations1createmsmtresultssql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6d\x73\xdb\x36\x12\xfe\xee\x5f\xb1\xe3\xe9\xf4\xec\x39\x49\x76" +
	"\x72\x69\xe6\xce\xd7\x4e\xc7\xb5\x99\x9c\xda\x58\xce\xc8\xf2\x35\x99\x9b\x1b\x11\x22\x97\x12\x6a\x10\x60\x00\x50" +
	"\x8c\xee\xd7\xdf\xec\x02\xa4\x48\xc5\x75\x9d\x99\xe6\x83\x23\x91\xc0\x62\x5f\x9f\x67\x17\x1a\x8f\xe1\xaf\xa5\x5c" +
	"\x5b\xe1\x11\xae\x4d\xa3\x8f\xfa\x0f\xee\xbc\xf0\x58\xa2\xf6\x3f\xe1\x5a\xea\xa3\xa3\xeb\xf9\xed\x7b\x58\x5c\xfe" +
	"\xf4\x2e\x81\xd4\xa2\xab\x95\x77\xe9\x3f\x07\x4f\x4b\x14\xae\xb6\xbc\xe7\xf0\x55\x6d\xd5\xe1\x23\x8d\xbe\x31\xf6" +
	"\x81\x1e\x3f\x7e\x6e\xa2\xf3\xe1\x9b\xfb\xea\x49\x05\xaf\xe6\xc9\xe5\x22\x19\x9c\x08\x27\x47\x00\xa9\xcc\x53\x98" +
	"\xce\x16\xc9\xdb\x64\x0e\xef\xe7\xd3\x9b\xcb\xf9\x47\xf8\x25\xf9\x08\x97\xf7\x8b\xdb\xe9\xec\x6a\x9e\xdc\x24\xb3" +
	"\xc5\x88\x56\xd6\x56\xa5\xf0\xef\xcb\xf9\xd5\xbf\x2e\xe7\x27\x2f\xbf\xfb\xee\x14\x66\xb7\x0b\x98\xdd\xbf\x7b\x37" +
	"\x82\xf1\x18\x3e\x7c\xf8\x00\xd2\x81\xdf\x48\x07\xca\xe8\x35\xa0\x36\xf5\x7a\xf3\x23\x6d\xcd\x84\xc7\xb5\xb1\xbb" +
	"\x65\x66\x72\xdc\x0b\x39\x14\xb1\xd8\x20\x64\xd2\xcb\xff\xa1\x56\x62\x05\xed\x2e\xa0\x5d\x50\x18\x0b\x7e\x83\x47" +
	"\xf0\xbc\x7f\xe3\x31\x38\xe9\x71\x02\xbf\x22\xd4\x0e\x69\x2b\x38\x6f\xa5\x5e\xc3\xec\x76\x96\x80\x37\x90\xa3\x36" +
	"\xfe\x6b\x04\x6a\x03\x0f\xda\x34\x7a\xa8\xd9\xe4\x88\x4d\x34\xb5\xf6\x5f\x58\xf8\x72\x6f\x61\x6b\xa0\x6f\x0c\x28" +
	"\xf4\x1e\x2d\xc4\x3d\xc1\xbe\x66\x23\xb3\x0d\xbb\xef\x79\x1a\x8d\xc7\x70\x3f\x7f\x07\x2b\x24\x67\x3b\xf0\xe6\xe8" +
	"\x34\x24\xcb\xaf\x08\x99\x45\x4a\x02\x01\x0e\x2b\xc1\xf9\xe0\xc5\x4a\x05\x1f\xb6\xa9\xc5\x5f\x5e\x82\x45\xe1\x8c" +
	"\x76\x17\xb4\xf3\xc5\x04\xde\x18\x0b\xce\x94\x08\xa6\x60\x97\x6d\x25\x36\x0e\x9a\x0d\x5a\x04\x8d\x98\xf3\x43\x6f" +
	"\xbc\x50\xa0\xeb\x72\x85\x96\x16\xc6\xdc\xce\x3b\xd9\x23\x92\x26\xfd\x5f\x1c\xac\x0d\x79\xdc\x1b\x58\x21\x94\x75" +
	"\xb6\x81\xd2\x58\x04\x2c\x0a\x99\x49\xd4\x9e\xde\xfc\x56\x3b\x0f\xca\x98\x87\xba\x62\xe9\xec\x15\x12\x6b\x4d\xe3" +
	"\x40\xea\xe0\x93\xf1\x38\xd8\x30\xa1\x4f\x2f\x27\x70\x52\x1a\xe7\x41\x96\x95\xb1\x5e\x68\x7f\x4a\x66\x37\x22\x48" +
	"\x14\x5b\x23\x73\xc8\xeb\x4a\xc9\x4c\x78\x52\x40\xc0\xaa\xd6\xd9\x86\xa4\x4a\x5d\x18\x5b\x0a\x2f\x0d\x49\x16\x9e" +
	"\x55\x1d\x2a\x9a\x99\xb2\xa4\xb7\x06\x1c\x6e\xd1\x92\xad\xad\xd3\x48\xc1\xda\xa1\xa5\x2d\x46\xb3\x32\xc9\x67\x51" +
	"\x56\x0a\x2f\xa2\xef\x4b\xb1\x83\x46\xba\x0d\x2b\x92\xe7\xf4\x1f\xd7\x44\x88\x00\xed\x57\x26\x0b\xc7\x17\xd6\x94" +
	"\xad\xa3\x2b\x6b\x56\x18\x9e\xd0\xd7\xb7\xef\xef\x48\x9e\xb1\x2c\xc3\xd5\x15\xd9\xc9\x21\x13\x4a\x99\x86\x75\x6d" +
	"\x55\xf1\x06\x8e\x33\x63\x2d\x66\xfe\x18\x04\x94\xd2\x65\x4a\x38\x27\x0b\x89\x39\xf4\x70\x27\x0a\xcc\xa5\x23\x9f" +
	"\xd4\xd2\x6d\x48\xcc\x0a\x7d\x83\xa8\xa1\x91\x85\x04\xa1\x73\x28\xcd\x4a\x92\x9f\x87\x90\xd1\x21\xd2\xd7\xc2\x46" +
	"\xdc\xb8\xd4\xa2\xc4\xa7\xf0\xe3\x2e\x14\x27\x2d\x03\x8b\x95\x45\x87\xda\xb7\x76\xf6\x85\xc4\x4a\x59\xed\x20\xc7" +
	"\x42\xd4\xca\x53\x2c\x2a\x53\xd5\x4a\x78\xcc\x61\x25\x1c\xe6\x7f\x54\x42\xe4\x09\xcd\x92\x2f\xef\x66\x93\x67\xac" +
	"\x8e\x28\xd2\xab\xa8\x07\xdc\x91\xe7\x2d\x16\x68\x51\x67\x21\xb4\x31\x65\x9f\x21\x70\x9f\x13\x6e\x04\x2b\xcc\x04" +
	"\x89\x6f\x86\xe9\x73\x8c\xda\xca\x6c\x73\xfc\x5c\x71\x8d\xf4\xb1\xc0\x72\xe1\x45\x28\x1d\x84\xa2\xf6\xb5\xc5\x49" +
	"\x3f\x16\x7e\x57\xf5\x62\xf1\xe2\xf5\x41\x28\x6e\x35\xd7\x3f\x65\xc4\x28\xa6\x03\x63\x9c\xac\xf6\x9b\x5e\x9d\xf7" +
	"\x37\x85\x00\x1a\x8b\x8e\x5c\x14\x22\xd9\x05\x31\x24\xbb\x29\x40\x68\x90\xd5\xf6\x15\x25\xa1\xac\xb6\xaf\x29\xb5" +
	"\x2d\x3a\xf7\x1c\xff\x2f\xb8\x6e\xf4\x1a\xa9\xe8\x2b\x8a\x78\x10\xd6\x09\x01\x25\x1f\xf0\xe2\x19\x92\xce\xcf\xcf" +
	"\xcf\x2f\xfe\xf8\xcf\xe8\x19\xa2\x42\x22\x4a\x07\x7f\xfb\x07\x64\x1b\x61\xd9\x92\x54\x38\xcd\xb5\x71\xf2\xaa\xe7" +
	"\xa1\x3f\x83\x22\x18\xe0\x87\x55\xd9\xf6\x1a\x5c\x94\x5f\x53\x96\xd1\xa9\xd2\x41\x26\x34\x61\x9e\x09\x31\x3f\x6e" +
	"\x70\x45\xbc\xe9\x8e\x47\x70\x2c\x4b\xfa\x5b\xa1\x65\xc4\xd4\x19\xd2\xd7\x52\xe6\xb9\xc2\x95\xf9\x7c\x1c\xe2\x96" +
	"\x7a\x74\x7e\xb9\xb6\xa6\xae\x0e\x6a\x7c\x90\x57\xed\x99\x5d\x21\xe5\xb2\xe0\xca\xf1\xe0\xbc\xb0\x7e\xe9\x65\x89" +
	"\x8c\x3f\xb6\xd6\xf4\x79\x50\x15\x1d\xb2\x2b\x67\x60\x23\xb6\xd8\x8a\xe3\x44\xf7\xa6\x85\x39\x4e\x78\xb3\x45\xbb" +
	"\x41\x91\x93\x3d\xcc\x84\x81\x01\x2c\x32\x86\xd2\x11\xc6\x6f\xd0\x42\x21\x32\x6f\xac\x0b\x2c\x10\xe5\xad\x0d\x48" +
	"\xcd\x90\x8d\x40\x86\x4d\xf6\xbe\x12\x0c\x34\x44\x0a\x62\x77\x01\xe9\xdd\xfd\xcd\x49\x54\xf5\x14\xde\xcc\x6f\x6f" +
	"\x60\xd0\xe2\x41\x23\x95\x02\xa1\x1a\xb1\x73\xe4\xdf\xef\x7f\x68\x25\xa5\x71\x57\xd8\xb4\x8f\x20\x13\x1a\xbd\x70" +
	"\xf0\xfd\x69\x70\xed\xde\x33\x29\x5c\x5f\x2e\x92\xc5\xf4\x26\x39\x70\x69\x2b\x2d\x85\x79\x72\xf9\x6e\x74\xd4\x9e" +
	"\x72\xef\x90\xb9\x47\xea\x9c\x48\x10\x41\x16\x7b\xc6\xd8\x08\x07\x8e\x40\x9f\x61\x23\xa8\x10\x13\xc8\x2d\x89\xf2" +
	"\x31\x4f\x61\x31\x9d\x7d\xa4\x34\x7e\xd1\x8f\xe2\x20\x75\xa8\x0a\xa1\x50\x62\x4d\x52\x1f\x3d\x2d\x88\xa6\x85\x39" +
	"\x27\x18\xf3\x66\x56\x5b\x8a\xbb\xda\x51\xa8\xb5\xd4\xeb\x49\x77\x36\xad\xfa\x9d\x93\x79\x09\x85\x7b\x59\x3b\xb1" +
	"\xc6\x65\x5d\x05\x93\x9f\x58\x92\x9b\x46\x3f\xba\x68\x3c\x86\x29\x75\x27\x44\xba\x62\x45\x8a\x70\x17\x14\x18\x9a" +
	"\x58\xdf\xb3\xf6\xa5\xf8\x2c\xcb\xba\x04\x85\x7a\xed\x19\x91\x5f\xbe\x3e\x07\x11\x9b\x5c\x6e\x76\xbb\x44\x3c\x58" +
	"\x6b\x0a\x28\xa4\x42\xa8\x84\xdf\x50\xa7\x00\x8d\xd4\xb9\x69\x22\xd6\xf5\xa7\x81\x65\x2e\x6d\x0f\x0d\x5e\x9f\x7f" +
	"\xe1\xee\x0e\xb6\xfb\xd5\x3d\x34\xe8\xcd\xed\x3c\x99\xbe\x9d\x51\xad\x9f\xf4\x97\x9f\xc2\x3c\x79\x93\xcc\x93\xd9" +
	"\x55\x72\x37\xe0\x70\x42\x8a\xd3\x47\x00\x65\x98\xc3\x7f\x12\xaa\x5c\xb4\xaf\x0a\x91\xe1\xca\x98\x87\x65\x89\xce" +
	"\xa1\x5e\xa3\x6d\xdf\x78\x54\xb8\xb6\xa2\x3c\xea\xa0\x55\x78\x27\xaa\xaa\xfd\xbe\xf1\xbe\x5a\x52\x51\xa3\x5d\x16" +
	"\x12\x55\xbe\x2c\x85\x96\xcc\xf9\xd2\xe8\xc1\x2a\xa9\xb7\x42\xc9\x7c\x69\xf1\x53\x4d\xd0\xa4\xa4\xee\xc1\x85\xdb" +
	"\xb4\x9f\x75\xee\x7b\x00\x36\x84\xae\xd7\xaf\xbe\x48\xbd\xaf\xae\xc5\x47\xaa\x66\x66\x7c\x68\xc2\xd7\x46\x09\xbd" +
	"\xbe\x20\x68\x6b\x4b\x87\x50\x8d\xa0\xd0\x63\x0f\x8e\xd3\x50\x10\x84\x59\xa9\xc8\xbc\xdc\x62\x3a\x02\x67\x8e\xfa" +
	"\xac\x2f\x1d\xe0\xa7\x5a\x6e\x85\x8a\x0d\x35\x97\xda\x0a\xb9\x77\xb2\x35\x57\x5d\x21\x94\xc3\x0e\xcb\x52\x3e\x26" +
	"\x85\x45\xf2\x21\x86\xed\x19\xb5\x17\xb9\x29\x54\x4a\xa7\xb0\x80\x1c\x43\xc9\xe7\x20\xdd\xb2\xae\x94\x11\x39\xe6" +
	"\x8c\x0a\x23\x90\xda\xf9\x08\xc4\xdc\xe5\xd7\x4e\xea\x75\x2b\xad\x5b\xbe\x2c\x84\x54\x98\x8f\x42\x45\x09\xdf\xb6" +
	"\x41\xda\xf8\x70\x48\x27\x95\x8b\x72\x9f\xa1\x90\xd7\x5d\x64\x89\x1c\xa8\x70\xfd\x00\x4f\xda\x9d\xcf\x44\xb3\x43" +
	"\xf9\x41\x31\x6e\xf3\x6a\xcd\x51\xe8\x20\xd4\x6d\x4c\xad\x72\x0e\x15\xf1\x98\xe5\x65\xad\x3c\x8b\x63\xda\x20\xfd" +
	"\x5e\x93\x20\xea\x29\x6c\xa3\x15\xb5\xc5\x65\xe9\xd6\xc3\x3e\xb9\x85\x81\x43\x87\x3d\x25\xac\xb7\xf0\x29\x99\x04" +
	"\x84\xee\x4b\xf4\xe6\x28\x70\x72\x55\xc2\x7a\x99\xd5\x4a\xd8\x81\x63\x88\x40\x56\x44\x20\xd1\x52\xa1\xf3\x7d\x4e" +
	"\xa2\xc5\xc2\x44\x2e\xbe\x9f\x32\x14\x78\xf1\x80\x31\x5b\x89\x5d\x45\x16\x86\x3c\x6f\x00\x25\x73\xf1\x46\xe6\x08" +
	"\xd2\x77\x03\xd0\xde\x93\x4c\x20\xc4\x49\x3c\x0c\x05\x60\xde\xa2\xdd\x81\x42\xe1\x3c\x4d\x33\xdd\x60\x25\x56\x52" +
	"\x49\x1f\xdb\xf2\x41\x04\xe2\xfd\x44\x6e\x28\xb7\xb8\x89\x68\x3b\x8a\x98\xc5\xbd\x36\xde\x44\xe6\x62\x01\x3d\xa3" +
	"\x7f\xec\xa2\x60\xd1\xd6\xfa\x2b\x52\xca\xa1\xdd\xa2\x1d\x3b\xb2\x31\x74\x21\x4b\x99\x83\x45\x5f\x5b\x4d\x13\xcb" +
	"\x2e\xce\xbd\x4a\x21\x75\x24\x13\xf8\x69\x37\x2c\x95\xfd\xa6\x6f\x41\xea\xaa\xf6\x23\xd8\x99\x9a\x3d\xfb\xa9\x26" +
	"\x5f\xb0\xf5\x95\x24\xe5\x0b\xf4\xf1\x1e\xa1\xaf\x7c\xe7\x86\xe4\x73\xf7\xf1\x6d\xb2\x60\xc4\x74\x17\x67\x67\xa2" +
	"\x92\x13\x63\xb4\x9c\x48\x43\x9f\xcf\xb6\x2f\xce\xfa\x54\xf0\x23\x9f\xfa\xc3\x37\xd3\xd9\xfb\xfb\xc5\xb7\x9d\x3a" +
	"\x3f\x7c\x33\x4f\xde\xdf\xce\x17\xcb\xe9\xf5\x5e\xbe\xb7\x22\x0b\x61\x2a\xa4\xa5\x76\xdd\x63\xb9\x1f\x6c\x63\xcb" +
	"\xfa\x9f\xff\xa6\xa0\xa4\xf3\x6d\x51\xe9\xa0\x77\xc7\x14\x03\x86\xe4\x9b\x27\x6f\x60\x1d\x79\xf9\xe7\xbb\xdb\x59" +
	"\x98\x9b\x87\x46\xd2\xf8\xd5\x6b\xd8\xd0\x85\x56\x7a\x2b\x54\x8d\x0e\x4e\xd2\x4e\xef\x74\x04\x29\x5b\x94\x9e\x82" +
	"\xb0\x5c\xd1\x45\xad\xf6\xde\x13\x1d\xab\xf7\x84\x73\x51\x50\xe2\x0b\x65\x51\xe4\xbb\x50\x00\x95\x35\x19\x91\x59" +
	"\x17\xc6\x4a\x56\x48\x94\x33\xea\xe1\x81\x2c\x2b\x15\x84\x64\x0a\x85\xae\x2b\x9e\x86\xa2\x98\x0e\xdd\xfa\x0e\x8f" +
	"\xc0\xb1\xd7\x78\x58\xbd\x87\x3c\xcb\xd3\x43\x43\x6e\xd4\xa6\x6d\x74\xb9\xff\x68\x0b\xf5\x0f\xa6\x99\xf1\x38\xde" +
	"\x19\xe5\x93\x08\x36\xb5\x55\xfd\x7e\xe3\xcb\xc4\x26\x74\xde\xa1\xa7\x0e\x10\x05\x4d\x98\xed\x4d\x46\x97\xc7\x23" +
	"\x58\xd5\x0c\xe6\xe4\xe2\x4a\x09\xee\xf5\xe2\xb5\xc8\x80\xc1\x84\x0f\x77\x4e\x95\x91\xda\xb7\x63\xab\x46\x61\x7b" +
	"\xb3\x6b\x18\x31\x11\x2f\xba\x94\x5d\x4b\xbf\xa9\x57\x93\xcc\x94\x67\x94\xb9\x67\xad\xe3\xcf\x56\xca\xac\xce\x4a" +
	"\xe1\x3c\xda\xb3\xdc\x64\x8e\x5f\x8f\xeb\x5a\xe6\x93\x32\x87\x6f\xfb\xcd\xc2\x93\x72\xa4\x73\x35\xba\xb3\x57\x7f" +
	"\xff\xb2\x67\x8b\x9e\xa1\x3e\xe1\xd0\x33\x11\x43\x5d\x6b\x47\x26\x1c\xbb\x46\x40\x3b\x5a\xf1\x60\x31\x0a\xf9\x24" +
	"\xf8\x96\x92\xfc\x49\xf3\xab\xda\xb5\xb2\x56\xca\x64\x0f\xc4\x89\x44\xde\x04\x7c\x1a\xa6\x37\xbc\xb1\x6d\xad\xe3" +
	"\x57\x47\xe3\x88\x8b\x00\x50\x3d\x2d\x48\x16\x7c\x3d\x14\xe7\x37\x68\x84\x83\x1c\x3d\x66\x1c\xf6\xb8\xfe\x63\xc4" +
	"\x95\xf4\xe7\xdb\xe9\x2c\x05\x01\xe9\xd5\xed\xfd\x6c\x71\x72\x9a\x76\x15\xc7\xf5\xd4\x9a\x17\xe7\x97\x80\xd0\xb1" +
	"\x46\x45\x77\x87\x77\xa0\x05\x04\xfb\x8d\xed\x1e\x4c\x6f\x48\x6d\xd7\x41\xab\xd0\xa6\x14\x6a\xd7\x07\xd7\x47\x86" +
	"\x0e\x0d\xa6\x12\x9f\xea\x88\x04\xce\xdb\x3a\xa3\x3c\x19\xc5\x8b\xca\x86\x1a\x29\x62\xa0\xfe\x4d\x26\x77\x79\x0f" +
	"\xb8\x73\x5d\x8b\x19\x6f\x34\xe3\xc5\xf2\xb0\xb1\x40\x2f\xa4\x72\xf1\xfa\x93\x30\x8a\x45\xf5\xd8\xc8\xc1\x09\x7e" +
	"\x9e\xf4\xa9\x2a\xd4\xf1\x19\x0d\x1d\xf4\x01\x5c\x45\xd2\x4d\x01\xb3\xeb\xc5\x28\xfa\x8a\x7b\xa7\xa2\xb5\x9f\xca" +
	"\x81\x33\x83\xdc\xd2\x75\x59\xe8\xb3\xc9\x69\xaf\x33\x25\x9d\xd3\x60\xe9\x63\x34\x83\x90\x59\xe3\xda\xfb\xc5\x01" +
	"\x8f\x51\x08\x83\xed\x8d\x89\x77\x4d\xe0\xcd\x1a\x89\x71\x3b\x80\x21\x8b\x7e\x67\xb2\x78\x64\xda\xdb\x0a\x2b\xf9" +
	"\x20\xee\x19\xa4\xf6\x68\xb5\x50\x8a\x39\x97\x80\xff\x21\x60\xa0\x08\xe3\x12\x4f\xe3\x7a\x9c\x4b\xf7\xf0\x08\xa2" +
	"\xba\xc9\x6f\xce\xe8\x09\x4c\x3d\xb7\x7b\x25\xf5\x08\x0e\xb5\x63\xdd\x1b\x4b\x75\x41\x9d\x6c\x98\xa3\xd0\x02\xf2" +
	"\x4d\xc8\xaa\x4b\xed\x8d\x31\xec\xc2\x9b\x5f\x38\x42\x95\xc5\x6d\xbc\x32\x6c\x1b\x09\x12\xd2\x62\x4e\x90\x63\x34" +
	"\x75\x0c\x0f\xf1\xea\xa6\x14\x7b\x61\xd4\x07\x94\x42\xef\x06\x1a\xf2\xb9\x05\x5f\x87\xf6\xf1\x98\x9e\x2c\xc9\xc8" +
	"\xa7\x07\xb7\xde\x54\xc6\xec\xd3\xba\x7a\x38\x95\xb5\x37\x00\x71\x26\x0b\x80\x7c\x3b\x83\xeb\xe4\x5d\xb2\x48\xe0" +
	"\xea\xf2\xee\xea\xf2\x3a\xa1\x27\xf7\xef\x69\xf0\x68\x9f\x30\x09\x4c\x0b\xca\xe3\x1c\x15\xfa\xd0\xc6\x70\x82\xf6" +
	"\x9b\x9c\xe7\xfe\xbe\x11\xfd\x20\x94\x3a\xac\x06\x17\xaf\xc5\xc3\x29\x39\x0d\xc0\x0d\x2a\x35\x79\xc4\xc6\xc8\x1a" +
	"\x43\x03\xf9\xd7\xa6\xfd\xc4\xf9\xbb\xbf\x67\xfd\x3f\x00\x00\xff\xff\xc9\xf1\x5a\xc3\x72\x1b\x00\x00")

func bindataDataMigrations1createmsmtresultssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataMigrations1createmsmtresultssql,
		"data/migrations/1_create_msmt_results.sql",
	)
}



func bindataDataMigrations1createmsmtresultssql() (*asset, error) {
	bytes, err := bindataDataMigrations1createmsmtresultssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/migrations/1_create_msmt_results.sql",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/default-config.json":                  bindataDataDefaultconfigjson,
	"data/migrations/1_create_msmt_results.sql": bindataDataMigrations1createmsmtresultssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"default-config.json": {Func: bindataDataDefaultconfigjson, Children: map[string]*bintree{}},
		"migrations": {Func: nil, Children: map[string]*bintree{
			"1_create_msmt_results.sql": {Func: bindataDataMigrations1createmsmtresultssql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

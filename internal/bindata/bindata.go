// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/default-config.json
// data/migrations/1_create_msmt_results.sql

package bindata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDataDefaultconfigjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x6f\xdb\x3c\x0c\x86\xef\xf9\x15\x82\xce\x75\x53\xe0\xbb\xe5" +
	"\xf8\xdd\x76\xd8\x3a\x60\xbb\x15\x85\x20\x5b\xb4\x4d\x4c\x26\x35\x91\x4e\x16\x0c\xfd\xef\x83\xdc\x24\x56\xda\xae" +
	"\xeb\xd1\xef\x4b\x53\xe2\x43\x52\xbf\x37\xc6\x58\x67\x77\xc6\x7e\x1f\x51\x0c\x8a\x39\xf2\x9c\xcd\xfd\xfd\x97\x4f" +
	"\xe6\x6b\xe6\x16\x4c\xc7\xd4\xe3\x60\x7a\x8c\x70\x6b\xbe\x01\x98\x51\x35\xc9\x6e\xbb\x65\x26\xbc\x45\xde\x8e\x10" +
	"\xd3\x36\x95\xd8\xa6\x8b\x68\x7a\xce\xa6\x48\xf6\x66\x49\xbd\x87\x2c\xc8\x64\x77\xe6\xee\x59\x40\xea\x39\x4f\x10" +
	"\x5c\xc7\x24\x40\x6a\x77\xa6\xf7\x51\xe0\xe4\x8a\x6b\x41\xbd\xdd\x19\xcd\xf3\xb3\xe6\x67\x65\x37\xa7\xe0\x15\x6a" +
	"\x59\x46\x9f\x91\x06\xbb\x33\xa5\x06\x63\x2c\x52\x17\xe7\x00\x0e\x53\x9d\xb2\x32\xbc\x50\x95\xa0\x32\x86\x24\xd7" +
	"\xc6\x9c\x22\xfb\xe0\x32\xc8\x1c\xf5\xec\x6d\x8c\x79\x5a\x4e\x26\x56\xec\xb1\xf3\x8a\x4c\xb2\x9e\x0f\xe4\xdb\x08" +
	"\xe1\x3a\xd3\x12\x7b\x74\x4c\x4e\x41\xd4\x75\x3c\xa5\x08\xfa\x0c\xe4\xcd\x30\x82\x83\x9c\xef\x7f\x39\xb1\x20\x98" +
	"\xbc\x42\x58\xb2\x5c\x55\xbd\x9e\x5a\x97\x7c\x52\x97\xf0\x92\xee\x61\x91\x8d\xb1\x07\x68\x9b\x8e\x89\xa0\x53\xdc" +
	"\xa3\x1e\xed\xcd\xd9\xe9\x7d\x07\x2d\xf3\x8f\x66\x02\x11\xa0\x01\xf2\xea\x1d\x46\xaf\xe2\x53\x5a\x15\x85\x08\x43" +
	"\xf6\xd3\xaa\x04\x2f\xe3\xfa\x45\x41\xd7\x8f\x32\x31\x0d\xd2\xde\x47\x0c\x4d\x86\x9f\x33\x88\x36\x11\x09\x5e\x84" +
	"\x8c\xe0\x03\xe4\xa6\x47\x88\xa1\x99\x3c\x61\x9a\xe3\x42\xd9\x2e\x61\x8f\xa7\xe2\x26\x26\x1d\xe3\xd1\xf9\x18\xf9" +
	"\xe0\xa9\x2b\x63\x61\xff\xbb\xbb\xfb\xfc\xbf\xbd\x10\x5b\x68\x0b\x68\x81\x55\xf5\xe8\x00\xad\xa0\xc2\xaa\x54\xac" +
	"\x3a\xaf\x30\x70\xc6\xc5\x7d\x78\x5c\xec\xa7\xcb\xa4\x88\x7a\x52\x57\xd8\xf8\xa1\x6e\xc0\x3b\xb0\xdf\x87\xfa\x16" +
	"\xd6\x1a\xec\x49\xba\xbe\x47\x82\x5c\xb6\xe7\x54\xf4\x47\x6e\x50\x1a\x71\x4e\x55\x77\xc7\x09\xe4\x3d\xe4\x82\xae" +
	"\x4c\x97\x7d\xc3\x73\x89\xb3\xbe\x0e\x28\x8d\xfe\xeb\xdf\x95\x79\xfd\xfb\x55\x19\x13\x86\x10\xa1\xe5\x5f\x1f\x2c" +
	"\xe2\xdf\x03\xf4\xc1\x11\xba\xf0\x5c\x57\x2b\xec\x0b\xcd\xf0\xfa\x1d\xe9\x78\x26\xcd\xc7\x17\x2f\x83\x80\x0b\x3c" +
	"\x79\x24\xd7\x67\xa6\xd3\x2e\xd6\xab\x27\x40\xc1\x75\xb9\x70\xc8\x50\x10\xd4\xef\xc7\xe6\x69\xf3\x27\x00\x00\xff" +
	"\xff\x42\x02\xc0\xed\x72\x05\x00\x00")

func bindataDataDefaultconfigjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataDefaultconfigjson,
		"data/default-config.json",
	)
}



func bindataDataDefaultconfigjson() (*asset, error) {
	bytes, err := bindataDataDefaultconfigjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/default-config.json",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataDataMigrations1createmsmtresultssql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xff\x6f\xdb\x38\xb2\xff\x3d\x7f\xc5\x20\x58\xec\x4b\xf0\x6c\x27" +
	"\xed\xeb\x16\xef\x72\xbb\x58\x64\x13\xb5\xe7\xdd\xc6\x29\x1c\xe7\xb6\xc5\xe1\x60\xd1\xd2\xc8\xe6\x86\x22\x55\x92" +
	"\xb2\xea\xfb\xeb\x0f\x33\xa4\x64\xc9\x4d\xb3\x29\xb0\xfd\x21\xb5\x25\x72\x38\x5f\x3f\x9f\x19\x7a\x3c\x86\xff\x2d" +
	"\xe5\xda\x0a\x8f\x70\x6d\x1a\x7d\xd4\x7f\x70\xe7\x85\xc7\x12\xb5\xff\x05\xd7\x52\x1f\x1d\x5d\xcf\x6f\xdf\xc3\xe2" +
	"\xf2\x97\x77\x09\xa4\x16\x5d\xad\xbc\x4b\xff\x3e\x78\x5a\xa2\x70\xb5\xe5\x3d\x87\xaf\x6a\xab\x0e\x1f\x69\xf4\x8d" +
	"\xb1\x0f\xf4\xf8\xf1\x73\x13\x9d\x0f\xdf\xdc\x57\x4f\x2a\x78\x35\x4f\x2e\x17\xc9\xe0\x44\x38\x39\x02\x48\x65\x9e" +
	"\xc2\x74\xb6\x48\xde\x26\x73\x78\x3f\x9f\xde\x5c\xce\x3f\xc2\x6f\xc9\x47\xb8\xbc\x5f\xdc\x4e\x67\x57\xf3\xe4\x26" +
	"\x99\x2d\x46\xb4\xb2\xb6\x2a\x85\x7f\x5e\xce\xaf\xfe\x71\x39\x3f\x79\xf9\xc3\x0f\xa7\x30\xbb\x5d\xc0\xec\xfe\xdd" +
	"\xbb\x11\x8c\xc7\xf0\xe1\xc3\x07\x90\x0e\xfc\x46\x3a\x50\x46\xaf\x01\xb5\xa9\xd7\x9b\x9f\x69\x6b\x26\x3c\xae\x8d" +
	"\xdd\x2d\x33\x93\xe3\x5e\xc8\xa1\x88\xc5\x06\x21\x93\x5e\xfe\x07\xb5\x12\x2b\x68\x77\x01\xed\x82\xc2\x58\xf0\x1b" +
	"\x3c\x82\xe7\xfd\x1b\x8f\xc1\x49\x8f\x13\xf8\x1d\xa1\x76\x48\x5b\xc1\x79\x2b\xf5\x1a\x66\xb7\xb3\x04\xbc\x81\x1c" +
	"\xb5\xf1\xdf\x22\x50\x1b\x78\xd0\xa6\xd1\x43\xcd\x26\x47\x6c\xa2\xa9\xb5\xff\xc2\xc2\x97\x7b\x0b\x5b\x03\x7d\x63" +
	"\x40\xa1\xf7\x68\x21\xee\x09\xf6\x35\x1b\x99\x6d\xd8\x7d\xcf\xd3\x68\x3c\x86\xfb\xf9\x3b\x58\x21\x39\xdb\x81\x37" +
	"\x47\xa7\x21\x59\x7e\x47\xc8\x2c\x52\x12\x08\x70\x58\x09\xce\x07\x2f\x56\x2a\xf8\xb0\x4d\x2d\xfe\xf2\x12\x2c\x0a" +
	"\x67\xb4\xbb\xa0\x9d\x2f\x26\xf0\xc6\x58\x70\xa6\x44\x30\x05\xbb\x6c\x2b\xb1\x71\xd0\x6c\xd0\x22\x68\xc4\x9c\x1f" +
	"\x7a\xe3\x85\x02\x5d\x97\x2b\xb4\xb4\x30\xe6\x76\xde\xc9\x1e\x91\x34\xe9\xff\xc7\xc1\xda\x90\xc7\xbd\x81\x15\x42" +
	"\x59\x67\x1b\x28\x8d\x45\xc0\xa2\x90\x99\x44\xed\xe9\xcd\x1f\xb5\xf3\xa0\x8c\x79\xa8\x2b\x96\xce\x5e\x21\xb1\xd6" +
	"\x34\x0e\xa4\x0e\x3e\x19\x8f\x83\x0d\x13\xfa\xf4\x72\x02\x27\xa5\x71\x1e\x64\x59\x19\xeb\x85\xf6\xa7\x64\x76\x23" +
	"\x82\x44\xb1\x35\x32\x87\xbc\xae\x94\xcc\x84\x27\x05\x04\xac\x6a\x9d\x6d\x48\xaa\xd4\x85\xb1\xa5\xf0\xd2\x90\x64" +
	"\xe1\x59\xd5\xa1\xa2\x99\x29\x4b\x7a\x6b\xc0\xe1\x16\x2d\xd9\xda\x3a\x8d\x14\xac\x1d\x5a\xda\x62\x34\x2b\x93\x7c" +
	"\x16\x65\xa5\xf0\x22\xfa\xbe\x14\x3b\x68\xa4\xdb\xb0\x22\x79\x4e\xff\x71\x4d\x84\x08\xd0\x7e\x65\xb2\x70\x7c\x61" +
	"\x4d\xd9\x3a\xba\xb2\x66\x85\xe1\x09\x7d\x7d\xfb\xfe\x8e\xe4\x19\xcb\x32\x5c\x5d\x91\x9d\x1c\x32\xa1\x94\x69\x58" +
	"\xd7\x56\x15\x6f\xe0\x38\x33\xd6\x62\xe6\x8f\x41\x40\x29\x5d\xa6\x84\x73\xb2\x90\x98\x43\x0f\x77\xa2\xc0\x5c\x3a" +
	"\xf2\x49\x2d\xdd\x86\xc4\xac\xd0\x37\x88\x1a\x1a\x59\x48\x10\x3a\x87\xd2\xac\x24\xf9\x79\x08\x19\x1d\x22\x7d\x2b" +
	"\x6c\xc4\x8d\x4b\x2d\x4a\x7c\x0a\x3f\xee\x42\x71\xd2\x32\xb0\x58\x59\x74\xa8\x7d\x6b\x67\x5f\x48\xac\x94\xd5\x0e" +
	"\x72\x2c\x44\xad\x3c\xc5\xa2\x32\x55\xad\x84\xc7\x1c\x56\xc2\x61\xfe\x67\x25\x44\x9e\xd0\x2c\xf9\xf2\x6e\x36\x79" +
	"\xc6\xea\x88\x22\xbd\x8a\x7a\xc0\x1d\x79\xde\x62\x81\x16\x75\x16\x42\x1b\x53\xf6\x19\x02\xf7\x39\xe1\x46\xb0\xc2" +
	"\x4c\x90\xf8\x66\x98\x3e\xc7\xa8\xad\xcc\x36\xc7\xcf\x15\xd7\x48\x1f\x0b\x2c\x17\x5e\x84\xd2\x41\x28\x6a\x5f\x5b" +
	"\x9c\xf4\x63\xe1\x77\x55\x2f\x16\x2f\x5e\x1f\x84\xe2\x56\x73\xfd\x53\x46\x8c\x62\x3a\x10\xc6\x41\x2a\xab\xfd\xae" +
	"\x57\xe7\xfd\x5d\x21\x82\xc6\xa2\x23\x1f\x85\x50\x76\x51\x0c\xd9\x6e\x0a\x10\x1a\x64\xb5\x7d\x45\x59\x28\xab\xed" +
	"\x6b\xca\x6d\x8b\xce\x3d\x27\x00\x0b\x2e\x1c\xbd\x46\xaa\xfa\x8a\x42\x1e\x84\x75\x42\x40\xc9\x07\xbc\x78\x86\xa4" +
	"\xf3\xf3\xf3\xf3\x8b\x3f\xff\x33\x7a\x86\xa8\x90\x89\xd2\xc1\xff\xfd\x0d\xb2\x8d\xb0\x6c\x49\x2a\x9c\xe6\xe2\x38" +
	"\x79\xd5\xf3\xd0\x5f\xc1\x11\x8c\xf0\xc3\xb2\x6c\x9b\x0d\xae\xca\x6f\xa9\xcb\xe8\x54\xe9\x20\x13\x9a\x40\xcf\x84" +
	"\xa0\x1f\x37\xb8\x22\xe2\x74\xc7\x23\x38\x96\x25\xfd\xad\xd0\x32\x64\xea\x0c\xe9\x6b\x29\xf3\x5c\xe1\xca\x7c\x3e" +
	"\x0e\x71\x4b\x3d\x3a\xbf\x5c\x5b\x53\x57\x07\x45\x3e\x48\xac\xf6\xcc\xae\x92\x72\x59\x70\xe9\x78\x70\x5e\x58\xbf" +
	"\xf4\xb2\x44\x06\x20\x5b\x6b\xfa\x3c\x28\x8b\x0e\xda\x95\x33\xb0\x11\x5b\x6c\xc5\x71\xa6\x7b\xd3\xe2\x1c\x67\xbc" +
	"\xd9\xa2\xdd\xa0\xc8\xc9\x1e\xa6\xc2\x40\x01\x16\x19\x44\xe9\x08\xe3\x37\x68\xa1\x10\x99\x37\xd6\x05\x1a\x88\xf2" +
	"\xd6\x06\xa4\x66\xcc\x46\x20\xc3\x26\x7b\x5f\x09\x46\x1a\x62\x05\xb1\xbb\x80\xf4\xee\xfe\xe6\x24\xaa\x7a\x0a\x6f" +
	"\xe6\xb7\x37\x30\xe8\xf1\xa0\x91\x4a\x81\x50\x8d\xd8\x39\xf2\xef\x8f\x3f\xb5\x92\xd2\xb8\x2b\x6c\xda\x47\x90\x19" +
	"\x8d\x5e\x38\xf8\xf1\x34\xb8\x76\xef\x99\x14\xae\x2f\x17\xc9\x62\x7a\x93\x1c\xb8\xb4\x95\x96\xc2\x3c\xb9\x7c\x37" +
	"\x3a\x6a\x4f\xb9\x77\xc8\xe4\x23\x75\x4e\x2c\x88\x20\x8b\x3d\x65\x6c\x84\x03\x47\xa8\xcf\xb8\x11\x54\x88\x09\xe4" +
	"\x96\xc4\xf9\x98\xa7\xb0\x98\xce\x3e\x52\x1a\xbf\xe8\x47\x71\x90\x3a\x54\x85\x50\x28\xb1\x26\xa9\x8f\x9e\x16\x44" +
	"\xd3\xc2\x9c\x13\x8c\x89\x33\xab\x2d\xc5\x5d\xed\x28\xd4\x5a\xea\xf5\xa4\x3b\x9b\x56\x7d\xe5\x64\x5e\x42\xe1\x5e" +
	"\xd6\x4e\xac\x71\x59\x57\xfb\x54\xff\xfa\xaa\xdc\x34\xfa\x6b\xeb\xc6\x63\x98\x52\x93\x42\xdc\x2b\x56\xa4\x0e\x37" +
	"\x43\x81\xa8\x89\xfc\x3d\xdb\x50\x8a\xcf\xb2\xac\x4b\x50\xa8\xd7\x9e\x81\xf9\xe5\xeb\x73\x10\xb1\xd7\xe5\x9e\xb7" +
	"\x4b\xc7\x83\xb5\xa6\x80\x42\x2a\x84\x4a\xf8\x0d\x35\x0c\xd0\x48\x9d\x9b\x26\x22\x5e\x7f\x28\x58\xe6\xd2\xf6\x30" +
	"\xe1\xf5\xf9\x17\x4e\xef\xd0\xbb\x5f\xe3\x43\x83\xde\xdc\xce\x93\xe9\xdb\x19\x55\xfc\x49\x7f\xf9\x29\xcc\x93\x37" +
	"\xc9\x3c\x99\x5d\x25\x77\x03\x2a\x27\xbc\x38\x7d\x04\x56\x86\x99\xfc\x17\x61\xcb\x45\xfb\xaa\x10\x19\xae\x8c\x79" +
	"\x58\x96\xe8\x1c\xea\x35\xda\xf6\x8d\x47\x85\x6b\x2b\xca\xa3\x0e\x60\x85\x77\xa2\xaa\xda\xef\x1b\xef\xab\x25\x95" +
	"\x36\xda\x65\x21\x51\xe5\xcb\x52\x68\xc9\xd4\x2f\x8d\x1e\xac\x92\x7a\x2b\x94\xcc\x97\x16\x3f\xd5\x04\x50\x4a\xea" +
	"\x1e\x68\xb8\x4d\xfb\x59\xe7\xbe\x07\x63\x43\x00\x7b\xfd\xea\x8b\x04\xfc\xe6\x8a\x7c\xa4\x76\x66\xc6\x87\x5e\x7c" +
	"\x6d\x94\xd0\xeb\x0b\x02\xb8\xb6\x80\x08\xdb\x08\x10\x3d\xf6\x40\x39\x0d\x65\x41\xc8\x95\x8a\xcc\xcb\x2d\xa6\x23" +
	"\x70\xe6\xa8\x4f\xfe\xd2\x01\x7e\xaa\xe5\x56\xa8\xd8\x57\x73\xc1\xad\x90\x5b\x28\x5b\x73\xed\x15\x42\x39\xec\x10" +
	"\x2d\xe5\x63\x52\x58\x24\x1f\x62\xd8\x9e\x51\x81\x91\xa1\x42\xa5\x74\x0a\x0b\xc8\x31\x14\x7e\x0e\xd2\x2d\xeb\x4a" +
	"\x19\x91\x63\xce\xd8\x30\x02\xa9\x9d\x8f\x70\xcc\xcd\x7e\xed\xa4\x5e\xb7\xd2\xba\xe5\xcb\x42\x48\x85\xf9\x28\x54" +
	"\x94\xf0\x6d\x37\xa4\x8d\x0f\x87\x74\x52\xb9\x28\xf7\x19\x0a\x79\xdd\x45\x96\x28\x82\x0a\xd7\x0f\x50\xa5\xdd\xf9" +
	"\x4c\x4c\x3b\x94\x1f\x14\xe3\x6e\xaf\xd6\x1c\x85\x0e\x48\xdd\xc6\xd4\x2a\xe7\x50\x11\x9b\x59\x5e\xd6\xca\xb3\x38" +
	"\xa6\x0d\xd2\xef\x35\x09\xa2\x9e\x42\x38\x5a\x51\x5b\x5c\x96\x6e\x3d\x6c\x97\x5b\x18\x38\x74\xd8\x53\xc2\x7a\x0b" +
	"\x9f\x92\x49\x40\xe8\xbe\xc4\x70\x8e\x02\x27\x57\x25\xac\x97\x59\xad\x84\x1d\x38\x86\x68\x64\x45\x34\x12\x2d\x15" +
	"\x3a\xdf\xe7\x24\x5a\x2c\x4c\x64\xe4\xfb\x29\x43\x81\x17\x0f\x18\xb3\x95\x38\x56\x64\x61\xd6\xf3\x06\x50\x32\x23" +
	"\x6f\x64\x8e\x20\x7d\x37\x07\xed\x3d\xc9\x34\x42\xcc\xc4\x33\x51\x00\xe6\x2d\xda\x1d\x28\x14\xce\xd3\x50\xd3\xcd" +
	"\x57\x62\x25\x95\xf4\xb1\x3b\x1f\x44\x20\x5e\x53\xe4\x86\x72\x8b\x5b\x89\xb6\xaf\x88\x59\xdc\xeb\xe6\x4d\xe4\x2f" +
	"\x16\xd0\x33\xfa\xe7\x2e\x0a\x16\x6d\xad\xbf\x21\xa5\x1c\xda\x2d\xda\xb1\x23\x1b\x43\x2f\xb2\x94\x39\x58\xf4\xb5" +
	"\xd5\x34\xb8\xec\xe2\xf8\xab\x14\x52\x5f\x32\x81\x5f\x76\xc3\x52\xd9\x6f\xfa\x1e\xa4\xae\x6a\x3f\x82\x9d\xa9\xd9" +
	"\xb3\x9f\x6a\xf2\x05\x5b\x5f\x49\x52\xbe\x40\x1f\xaf\x13\xfa\xca\x77\x6e\x48\x3e\x77\x1f\xdf\x26\x0b\x46\x4c\x77" +
	"\x71\x76\x26\x2a\x39\x31\x46\xcb\x89\x34\xf4\xf9\x6c\xfb\xe2\xac\x4f\x05\x3f\xf3\xa9\x3f\x7d\x37\x9d\xbd\xbf\x5f" +
	"\x7c\xdf\xa9\xf3\xd3\x77\xf3\xe4\xfd\xed\x7c\xb1\x9c\x5e\xef\xe5\x7b\x2b\xb2\x10\xa6\x42\x5a\x6a\xda\x3d\x96\xfb" +
	"\xf9\x36\x36\xae\xff\xfa\x77\x0a\x4a\x3a\xdf\x16\x95\x0e\x7a\x77\x4c\x31\x60\x48\xbe\x80\xf2\x06\xd6\x91\x97\x7f" +
	"\xbd\xbb\x9d\x85\xf1\x79\x68\x24\x4d\x61\xbd\xb6\x0d\x5d\x68\xa8\xb7\x42\xd5\xe8\xe0\x24\xed\xf4\x4e\x47\x90\xb2" +
	"\x45\xe9\x29\x08\xcb\x15\x5d\xd4\x6a\xef\x3d\xd1\xb1\x7a\x4f\x38\x17\x05\x25\xbe\x50\x16\x45\xbe\x0b\x05\x50\x59" +
	"\x93\x11\x99\x75\x61\xac\x64\x85\x44\x39\xa3\x1e\x1e\xc8\xb2\x52\x41\x48\xa6\x50\xe8\xba\xe2\x99\x28\x8a\xe9\xd0" +
	"\xad\xef\xf0\x08\x1c\x7b\x8d\x87\xd5\x7b\xc8\xb3\x3c\x43\x34\xe4\x46\x6d\xda\x76\x97\xfb\x8f\xb6\x50\xff\x64\xa6" +
	"\x19\x8f\xe3\xd5\x51\x3e\x89\x60\x53\x5b\xf5\x95\x7e\xe3\x30\xc3\x09\xa6\x77\xe8\xa9\x21\x44\x41\x13\x67\x7b\xb3" +
	"\xd1\x25\xf4\x08\x56\x35\xa3\x3a\xf9\xba\x52\x82\x5b\xbf\x78\x4d\x32\xa0\x32\xe1\xc3\x1d\x54\x65\xa4\xf6\xed\x18" +
	"\xab\x51\xd8\xde\x2c\x1b\x26\x4e\xc4\x8b\x2e\x77\xd7\xd2\x6f\xea\xd5\x24\x33\xe5\x19\xa5\xf0\x59\x1b\x81\xb3\x95" +
	"\x32\xab\xb3\x52\x38\x8f\xf6\x2c\x37\x99\xe3\xd7\xe3\xba\x96\xf9\xa4\xcc\xe1\xfb\x7e\xd7\xf0\xa4\x1c\xe9\x5c\x8d" +
	"\xee\xec\xd5\xff\x7f\xd9\xbc\x45\x17\x51\xc3\x70\xe8\x99\x08\xa6\xae\xb5\x23\x13\x8e\x5d\x23\xa0\x9d\xb4\x78\xce" +
	"\x18\x85\xc4\x12\x7c\x6b\x49\xfe\xa4\x71\x56\xed\x5a\x59\x2b\x65\xb2\x07\x22\x47\x62\x71\x42\x40\x0d\xd3\x1b\xde" +
	"\xd8\x76\xda\xf1\xab\xa3\xe9\xc4\x45\x24\xa8\x9e\x16\x24\x0b\xbe\x2e\x8a\xe3\x1c\x34\xc2\x41\x8e\x1e\x33\x8e\x7f" +
	"\x5c\xff\x31\x02\x4c\xfa\xeb\xed\x74\x96\x82\x80\xf4\xea\xf6\x7e\xb6\x38\x39\x4d\xbb\xd2\xe3\xc2\x6a\xcd\x8b\xe3" +
	"\x4c\x80\xea\x58\xac\xa2\xbb\xd3\x3b\xd0\x02\x82\xfd\xc6\x76\x0f\xa6\x37\xa4\xb6\xeb\x30\x56\x68\x53\x0a\xb5\xeb" +
	"\xa3\xec\x23\x33\x88\x06\x53\x89\x4f\x75\x84\x04\xe7\x6d\x9d\x51\x9e\x8c\xe2\xc5\x65\x43\x1d\x15\x51\x51\xff\x66" +
	"\x93\xdb\xbd\x07\xdc\xb9\xae\xd7\x8c\x37\x9c\xf1\xa2\x79\xd8\x61\xa0\x17\x52\xb9\x78\x1d\x4a\x60\xc5\xa2\x7a\xb4" +
	"\xe4\xe0\x04\x3f\x4f\xfa\x9c\x15\x0a\xfa\x8c\x06\x10\xfa\x00\xae\x22\xe9\xa6\x80\xd9\xf5\x62\x14\x7d\xc5\x4d\x54" +
	"\xd1\xda\x4f\xe5\xc0\x99\x41\x6e\xe9\xda\x2d\xf4\xd9\xe4\xb4\xd7\xa2\x92\xce\x69\xb0\xf4\xb1\x6a\x44\xc8\xac\x71" +
	"\xed\x7d\xe3\x80\xd0\x28\x84\xc1\xf6\xc6\xc4\xbb\x27\xf0\x66\x8d\x44\xbd\x1d\xd2\x90\x45\x5f\x2b\xf9\x2f\x87\xbf" +
	"\xad\xb0\x92\x0f\xe2\xe6\x41\x6a\x8f\x56\x0b\xa5\x98\x7c\x89\x01\x1e\x02\x18\x8a\x30\x37\xf1\x70\xae\xc7\xb9\x74" +
	"\x0f\x8f\x40\xab\x9b\xfc\xe1\x8c\x9e\xc0\xd4\x73\xdf\x57\x52\xb3\xe0\x50\x3b\xd6\xbd\xb1\x54\x17\xd4\xd2\x86\x81" +
	"\x0a\x2d\x20\x5f\x8c\xac\xba\xd4\xde\x18\xc3\x2e\xbc\xf9\x8d\x23\x54\x59\xdc\xc6\x2b\xc4\xb6\xa3\x20\x21\x2d\xe6" +
	"\x04\x39\x46\x53\xeb\xf0\x10\x6f\x72\x4a\xb1\x17\x46\x0d\x41\x29\xf4\x6e\xa0\x21\x9f\x5b\xf0\xf5\x68\x1f\x98\xe9" +
	"\xc9\x92\x8c\x7c\x7a\x82\xeb\x8d\x67\x4c\x43\xad\xab\x87\xe3\x59\x7b\x21\x10\x87\xb3\x80\xcc\xb7\x33\xb8\x4e\xde" +
	"\x25\x8b\x04\xae\x2e\xef\xae\x2e\xaf\x13\x7a\x72\xff\x9e\x26\x90\xf6\x09\xb3\xc1\xb4\xa0\x3c\xce\x51\xa1\x0f\xfd" +
	"\x0c\x27\x68\xbf\xdb\x79\xee\xef\x1d\xd1\x0f\x42\xa9\xc3\x6a\x70\xf1\x9a\x3c\x9c\x92\xd3\x24\xdc\xa0\x52\x93\x47" +
	"\x6c\x8c\xf4\x31\x34\x90\x7f\x7d\xda\x8f\x9e\x5f\xfd\x7d\xeb\xbf\x01\x00\x00\xff\xff\x90\x8a\x5a\xbc\x82\x1b\x00" +
	"\x00")

func bindataDataMigrations1createmsmtresultssqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDataMigrations1createmsmtresultssql,
		"data/migrations/1_create_msmt_results.sql",
	)
}



func bindataDataMigrations1createmsmtresultssql() (*asset, error) {
	bytes, err := bindataDataMigrations1createmsmtresultssqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/migrations/1_create_msmt_results.sql",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(0),
		modTime: time.Unix(0, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/default-config.json":                  bindataDataDefaultconfigjson,
	"data/migrations/1_create_msmt_results.sql": bindataDataMigrations1createmsmtresultssql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"default-config.json": {Func: bindataDataDefaultconfigjson, Children: map[string]*bintree{}},
		"migrations": {Func: nil, Children: map[string]*bintree{
			"1_create_msmt_results.sql": {Func: bindataDataMigrations1createmsmtresultssql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
